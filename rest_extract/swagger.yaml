components:
  schemas:
    delete_1.13_alert_{address}Examples:
      example:
        'Example 1: Delete a single alert recipient':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/alert/admin@example.com'}
          response: {name: admin@example.com}
      properties:
        ex1: {type: object}
    delete_1.13_array_connection_{connection}Examples:
      example:
        'Example 1: Disconnect array pure02 from array pure01':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/array/connection/pure02'}
          response: {name: pure02}
      properties:
        ex1: {type: object}
    delete_1.13_auth_sessionExamples:
      example:
        'Example 1: Delete (invalidate) a REST session':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/auth/session'}
          response: {username: os76}
      properties:
        ex1: {type: object}
    delete_1.13_hgroup_{hgroup}Examples:
      example:
        'Example 1: Delete host group hg4':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/hgroup/hg4'}
          response: {name: hg4}
      properties:
        ex1: {type: object}
    delete_1.13_hgroup_{hgroup}_volume_{volume}Examples:
      example:
        'Example 1: Disconnect volume v3 from host group hg4':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/hgroup/hg4/volume/v3'}
          response: {name: hg4, vol: v3}
      properties:
        ex1: {type: object}
    delete_1.13_host_{host}Examples:
      example:
        'Example 1: Delete host h5':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/host/h5'}
          response: {name: h5}
      properties:
        ex1: {type: object}
    delete_1.13_host_{host}_volume_{volume}Examples:
      example:
        'Example 1: Disconnect host h5 and volume v5_renamed':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/host/h5/volume/v5_renamed'}
          response: {name: h5, vol: v5_renamed}
      properties:
        ex1: {type: object}
    delete_1.13_network_{vlan_interface}Examples:
      example:
        'Example 1: Delete VLAN network interface ct0.eth1.100.':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/network/ct0.eth1.100'}
          response: {name: ct0.eth1.100}
      properties:
        ex1: {type: object}
    delete_1.13_pgroup_{pgroup}Examples:
      example:
        'Example 1: Destroys protection group pg5':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/pgroup/pg5'}
          response: {name: pg5}
        'Example 2: Eradicates protection group pg5':
          request:
            body: {eradicate: true}
            method: DELETE
            url: https://pure01.example.com/api/1.13/pgroup/pg5
          response: {name: pg5}
      properties:
        ex1: {type: object}
    delete_1.13_subnet_{subnet}Examples:
      example:
        'Example 1: Delete subnet managementSubnet':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/subnet/managementSubnet'}
          response: {name: managementSubnet}
      properties:
        ex1: {type: object}
    delete_1.13_volume_{volume}Examples:
      example:
        'Example 1: Destroy volume v6':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/volume/v6'}
          response: {name: v6}
        'Example 2: Eradicate volume v6':
          request: {body: '', method: DELETE, url: 'https://pure01.example.com/api/1.13/volume/v6?eradicate=true'}
          response: {name: v6}
      properties:
        ex1: {type: object}
    get_1.13_adminExamples:
      example:
        'Example 1: List users who have public keys':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/admin?publickey=true'}
          response: []
        'Example 2: List users who have API tokens':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/admin?api_token=true'}
          response:
          - {api_token: '****', created: '2017-10-06T21:58:34Z', name: os76}
          - {api_token: '****', created: '2017-10-06T21:57:08Z', name: pureuser}
      properties:
        ex1: {type: object}
    get_1.13_alertExamples:
      example:
        'Example 1: List all alert recipients':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/alert'}
          response:
          - {enabled: false, name: flasharray-alerts@purestorage.com}
      properties:
        ex1: {type: object}
    get_1.13_alert_{address}Examples:
      example:
        'Example 1: List a single alert recipient':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/alert/flasharray-alerts@purestorage.com'}
          response: {enabled: false, name: flasharray-alerts@purestorage.com}
      properties:
        ex1: {type: object}
    get_1.13_arrayExamples:
      example:
        'Example 1: List array attributes':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array'}
          response: {array_name: pure01, id: c35e0c1f-5ce9-4143-9121-e78bd57619a6,
            revision: 201710050655+ef2a03a, version: 5.0.0}
        'Example 2: List array controllers':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array?controllers=true'}
          response:
          - {mode: primary, model: VMware, name: CT0, status: ready, version: 5.0.0}
        'Example 3: List array space usage':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array?space=true'}
          response:
          - {capacity: 3510211154, data_reduction: 1.0, hostname: pure01, parity: 1.0,
            shared_space: 0, snapshots: 0, system: 0, thin_provisioning: 0.0, total: 0,
            total_reduction: 1.0, volumes: 0}
        'Example 4: List array space usage for the past hour':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array?space=true&historical=1h'}
          response:
          - {capacity: 3518741436, data_reduction: 1.0, hostname: pure01, parity: null,
            shared_space: 0, snapshots: 0, system: 0, thin_provisioning: null, time: '2017-10-06T21:56:47Z',
            total: 0, total_reduction: null, volumes: 0}
        'Example 5: List real-time performance data for the array':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array?action=monitor'}
          response:
          - {input_per_sec: 0, output_per_sec: 0, queue_depth: 0, reads_per_sec: 0,
            san_usec_per_read_op: 0, san_usec_per_write_op: 0, time: '2017-10-06T22:00:29Z',
            usec_per_read_op: 0, usec_per_write_op: 0, writes_per_sec: 0}
      properties:
        ex1: {type: object}
    get_1.13_array_connectionExamples:
      example:
        'Example 1: List connected arrays':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array/connection'}
          response: []
      properties:
        ex1: {type: object}
    get_1.13_array_console_lockExamples:
      example:
        'Example 1: Displays the console lock status':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array/console_lock'}
          response: {console_lock: disabled}
      properties:
        ex1: {type: object}
    get_1.13_array_phonehomeExamples:
      example:
        'Example 1: Display phonehome status':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array/phonehome'}
          response: {action: null, status: null}
      properties:
        ex1: {type: object}
    get_1.13_array_remoteassistExamples:
      example:
        'Example 1: Display remoteassist status':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/array/remoteassist'}
          response: {name: pure01-ct0, port: '', status: disabled}
      properties:
        ex1: {type: object}
    get_1.13_directoryserviceExamples:
      example:
        'Example 1: List the directory service configuration':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/directoryservice'}
          response:
            base_dn: DC=ad1,DC=example,DC=com
            bind_password: '****'
            bind_user: readonlyuser
            check_peer: false
            enabled: true
            uri: ['ldaps://ad1.example.com']
        'Example 2: List the current configured CA certificate':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/directoryservice?certificate=true'}
          response: {certificate: '-----BEGIN CERTIFICATE-----

              MIIE6jCCBFOgAwIBAgIDEIGKMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT

              MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0

              aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwNDAxMjMwMDE0WhcNMTUwNzAzMDQ1MDAw

              WjCBjzEpMCcGA1UEBRMgMmc4YU81d0kxYktKMlpENTg4VXNMdkRlM2dUYmc4RFUx

              CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRIwEAYDVQQHEwlTdW5u

              eXZhbGUxFDASBgNVBAoTC1lhaG9vICBJbmMuMRYwFAYDVQQDEw13d3cueWFob28u

              Y29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6ZM1jHCkL8rlEKse

              1riTTxyC3WvYQ5m34TlFK7dK4QFI/HPttKGqQm3aVB1Fqi0aiTxe4YQMbd++jnKt

              djxcpi7sJlFxjMZs4umr1eGo2KgTgSBAJyhxo23k+VpK1SprdPyM3yEfQVdV7JWC

              4Y71CE2nE6+GbsIuhk/to+jJMO7jXx/430jvo8vhNPL6GvWe/D6ObbnxS72ynLSd

              mLtaltykOvZEZiXbbFKgIaYYmCgh89FGVvBkUbGM/Wb5Voiz7ttQLLxKOYRj8Mdk

              TZtzPkM9scIFG1naECPvCxw0NyMyxY3nFOdjUKJ79twanmfCclX2ZO/rk1CpiOuw

              lrrr/QIDAQABo4ICDjCCAgowDgYDVR0PAQH/BAQDAgTwMB0GA1UdDgQWBBSmrfKs

              68m+dDUSf+S7xJrQ/FXAlzA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3JsLmdl

              b3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDCCAVsGA1UdEQSCAVIwggFOgg13

              d3cueWFob28uY29tggl5YWhvby5jb22CDHVzLnlhaG9vLmNvbYIMa3IueWFob28u

              Y29tggx1ay55YWhvby5jb22CDGllLnlhaG9vLmNvbYIMZnIueWFob28uY29tggxp

              bi55YWhvby5jb22CDGNhLnlhaG9vLmNvbYIMYnIueWFob28uY29tggxkZS55YWhv

              by5jb22CDGVzLnlhaG9vLmNvbYIMbXgueWFob28uY29tggxpdC55YWhvby5jb22C

              DHNnLnlhaG9vLmNvbYIMaWQueWFob28uY29tggxwaC55YWhvby5jb22CDHFjLnlh

              aG9vLmNvbYIMdHcueWFob28uY29tggxoay55YWhvby5jb22CDGNuLnlhaG9vLmNv

              bYIMYXUueWFob28uY29tggxhci55YWhvby5jb22CDHZuLnlhaG9vLmNvbTAfBgNV

              HSMEGDAWgBRI5mj5K9KylddH2CMgEE8zmJCf1DAdBgNVHSUEFjAUBggrBgEFBQcD

              AQYIKwYBBQUHAwIwDQYJKoZIhvcNAQEFBQADgYEAp9WOMtcDMM5T0yfPecGv5QhH

              RJZRzgeMPZitLksr1JxxicJrdgv82NWq1bw8aMuRj47ijrtaTEWXaCQCy00yXodD

              zoRJVNoYIvY1arYZf5zv9VZjN5I0HqUc39mNMe9XdZtbkWE+K6yVh6OimKLbizna

              inu9YTrN/4P/w6KzHho=

              -----END CERTIFICATE-----'}
        'Example 3: List the directory service group configuration':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/directoryservice?groups=true'}
          response: {array_admin_group: pureadmins, group_base: 'OU=PureStorage,OU=SAN,OU=IT,OU=US',
            readonly_group: purereadonly, storage_admin_group: pureusers}
      properties:
        ex1: {type: object}
    get_1.13_dnsExamples:
      example:
        'Example 1: List DNS settings':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/dns'}
          response:
            domain: example.com
            nameservers: [192.168.0.1, 192.168.1.1]
      properties:
        ex1: {type: object}
    get_1.13_driveExamples:
      example:
        'Example 1: List all flash and NVRAM devices':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/drive'}
          response:
          - {capacity: 461373440, details: null, last_evac_completed: '1970-01-01T00:00:00Z',
            last_failure: '1970-01-01T00:00:00Z', name: SH0.BAY0, protocol: SAS, status: healthy,
            type: SSD}
          - {capacity: 461373440, details: null, last_evac_completed: '1970-01-01T00:00:00Z',
            last_failure: '1970-01-01T00:00:00Z', name: SH0.BAY1, protocol: SAS, status: healthy,
            type: SSD}
          - {capacity: 461373440, details: null, last_evac_completed: '1970-01-01T00:00:00Z',
            status: healthy, type: NVRAM}
      properties:
        ex1: {type: object}
    get_1.13_drive_{drive}Examples:
      example:
        'Example 1: List a single flash module or NVRAM module.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/drive/SH0.BAY0'}
          response: {capacity: 461373440, details: null, last_evac_completed: '1970-01-01T00:00:00Z',
            last_failure: '1970-01-01T00:00:00Z', name: SH0.BAY0, protocol: SAS, status: healthy,
            type: SSD}
      properties:
        ex1: {type: object}
    get_1.13_hardwareExamples:
      example:
        'Example 1: List all hardware devices':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hardware'}
          response:
          - {details: null, identify: 'off', index: 0, name: CT0, slot: null, speed: null,
            status: ok, temperature: null, voltage: null}
          - {details: null, identify: null, index: 0, name: CT0.ETH0, slot: null,
            speed: 1000000000, status: ok, temperature: null, voltage: null}
          - {details: null, temperature: 25, voltage: null}
      properties:
        ex1: {type: object}
    get_1.13_hardware_{component}Examples:
      example:
        'Example 1: List a single hardware device':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hardware/SH0.BAY0'}
          response: {details: null, identify: 'off', index: 0, name: SH0.BAY0, slot: null,
            speed: null, status: ok, temperature: null, voltage: null}
      properties:
        ex1: {type: object}
    get_1.13_hgroupExamples:
      example:
        'Example 1: List all host groups':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hgroup'}
          response:
          - hosts: [h1, h2]
            name: hg1
          - hosts: []
            name: hg2
        'Example 2: List all host groups'' space usage':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hgroup?space=true'}
          response:
          - {data_reduction: 1.0, name: hg1, size: 1073741824, snapshots: 0, thin_provisioning: 1.0,
            total: 0, total_reduction: 1.0, volumes: 0}
          - {data_reduction: 1.0, name: hg2, size: 2147483648, snapshots: 0, thin_provisioning: 1.0,
            total: 0, total_reduction: 1.0, volumes: 0}
        'Example 3: Monitor I/O performance of all host groups':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hgroup?action=monitor'}
          response:
          - {input_per_sec: 0, name: hg2, output_per_sec: 0, reads_per_sec: 0, san_usec_per_read_op: 0,
            san_usec_per_write_op: 0, time: '2017-10-06T22:00:41Z', usec_per_read_op: 0,
            usec_per_write_op: 0, writes_per_sec: 0}
          - {input_per_sec: 0, name: hg1, output_per_sec: 0, reads_per_sec: 0, san_usec_per_read_op: 0,
            san_usec_per_write_op: 0, time: '2017-10-06T22:00:41Z', usec_per_read_op: 0,
            usec_per_write_op: 0, writes_per_sec: 0}
      properties:
        ex1: {type: object}
    get_1.13_hgroup_{hgroup}Examples:
      example:
        'Example 1: List host group hg1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hgroup/hg1'}
          response:
            hosts: [h1, h2]
            name: hg1
        'Example 2: List space usage for host group hg1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hgroup/hg1?space=true'}
          response: {data_reduction: 1.0, name: hg1, size: 1073741824, snapshots: 0,
            thin_provisioning: 1.0, total: 0, total_reduction: 1.0, volumes: 0}
        'Example 3: Monitor I/O performance for host group hg1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hgroup/hg1?action=monitor'}
          response: {input_per_sec: 0, name: hg1, output_per_sec: 0, reads_per_sec: 0,
            san_usec_per_read_op: 0, san_usec_per_write_op: 0, time: '2017-10-06T22:00:41Z',
            usec_per_read_op: 0, usec_per_write_op: 0, writes_per_sec: 0}
      properties:
        ex1: {type: object}
    get_1.13_hgroup_{hgroup}_volumeExamples:
      example:
        'Example 1: List volumes connected to host group hg1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/hgroup/hg1/volume'}
          response:
          - {lun: 254, name: hg1, vol: v1}
      properties:
        ex1: {type: object}
    get_1.13_hostExamples:
      example:
        'Example 1: List all hosts':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/host'}
          response:
          - hgroup: hg1
            iqn: []
            name: h1
            wwn: ['0000111122223333']
          - hgroup: hg1
            iqn: []
            name: h2
            wwn: []
          - hgroup: null
            iqn: []
            name: h3
            wwn: []
      properties:
        ex1: {type: object}
    get_1.13_host_{host}Examples:
      example:
        'Example 1: List space usage for host h1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/host/h1?space=true'}
          response: {data_reduction: 1.0, name: h1, size: 1073741824, snapshots: 0,
            thin_provisioning: 1.0, total: 0, total_reduction: 1.0, volumes: 0}
        'Example 2: List CHAP attributes for host h1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/host/h1?chap=true'}
          response: {host_password: null, host_user: null, name: h1, target_password: null,
            target_user: null}
        'Example 3: List personality attribute for host h1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/host/h1?personality=true'}
          response: {name: h1, personality: null}
        'Example 4: Display I/O performance for host h1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/host/h1?action=monitor'}
          response: {input_per_sec: 0, name: h1, output_per_sec: 0, reads_per_sec: 0,
            san_usec_per_read_op: 0, san_usec_per_write_op: 0, time: '2017-10-06T22:00:37Z',
            usec_per_read_op: 0, usec_per_write_op: 0, writes_per_sec: 0}
      properties:
        ex1: {type: object}
    get_1.13_host_{host}_volumeExamples:
      example:
        'Example 1: List private and shared connections for host h2':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/host/h2/volume'}
          response:
          - {hgroup: hg1, lun: 254, name: h2, vol: v1}
          - {hgroup: null, lun: 7, name: h2, vol: v3}
        'Example 2: List private connections for host h2':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/host/h2/volume?private=true'}
          response:
          - {lun: 7, name: h2, vol: v3}
        'Example 3: List shared connections for host h2':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/host/h2/volume?shared=true'}
          response:
          - {hgroup: hg1, lun: 254, name: h2, vol: v1}
      properties:
        ex1: {type: object}
    get_1.13_messageExamples:
      example:
        'Example 1: List all alert messages':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/message'}
          response: []
        'Example 2: List all audit trail messages':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/message?audit=true'}
          response:
          - {component_name: null, component_type: purearray, details: --senderdomain
              example.com, event: setattr, id: 3, opened: '2017-10-06T21:57:07Z',
            user: root}
          - {component_name: pureuser, component_type: pureadmin, details: --api-token,
            event: create, id: 4, opened: '2017-10-06T21:57:08Z', user: pureuser}
          - {component_name: null, component_type: puredns, details: '--domain example.com
              --nameservers 192.168.0.1,192.168.1.1', event: setattr, id: 5, opened: '2017-10-06T22:00:46Z',
            user: os76}
      properties:
        ex1: {type: object}
    get_1.13_networkExamples:
      example:
        'Example 1: List network interfaces':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/network'}
          response:
          - address: 10.14.225.210
            enabled: true
            gateway: 10.14.224.1
            hwaddr: 00:50:56:a5:98:08
            mtu: 1500
            name: ct0.eth0
            netmask: 255.255.240.0
            services: [management, replication]
            slaves: []
            speed: 1000000000
            subnet: null
          - {address: null, enabled: true, gateway: null, hwaddr: '00:50:56:a5:2b:6d',
            mtu: 1500, name: ct0.eth1, netmask: null, speed: 10000000000, subnet: null}
      properties:
        ex1: {type: object}
    get_1.13_network_{network_component}Examples:
      example:
        'Example 1: List settings for a single network interface':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/network/ct0.eth0'}
          response:
            address: 10.14.225.210
            enabled: true
            gateway: 10.14.224.1
            hwaddr: 00:50:56:a5:98:08
            mtu: 1500
            name: ct0.eth0
            netmask: 255.255.240.0
            services: [management, replication]
            slaves: []
            speed: 1000000000
            subnet: null
      properties:
        ex1: {type: object}
    get_1.13_pgroupExamples:
      example:
        'Example 1: List all protection groups.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup'}
          response:
          - hgroups: null
            hosts: null
            name: pg1
            source: pure01
            targets: null
            volumes: [v1]
          - hgroups: null
            hosts: null
            name: pg2
            source: pure01
            targets: null
            volumes: [v1]
        'Example 2: List all protection groups created on this array.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup?source=true'}
          response:
          - hgroups: null
            hosts: null
            name: pg1
            source: pure01
            targets: null
            volumes: [v1]
          - hgroups: null
            hosts: null
            name: pg2
            source: pure01
            targets: null
            volumes: [v1]
        'Example 3: List all protection groups and their schedules.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup?schedule=true'}
          response:
          - {name: pg1, replicate_at: null, replicate_blackout: null, replicate_enabled: false,
            replicate_frequency: 14400, snap_at: null, snap_enabled: false, snap_frequency: 3600}
          - {name: pg2, replicate_at: null, replicate_blackout: null, replicate_enabled: false,
            replicate_frequency: 14400, snap_at: null, snap_enabled: false, snap_frequency: 3600}
        'Example 4: List all protection groups and their retention policies.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup?retention=true'}
          response:
          - {all_for: 86400, days: 7, name: pg1, per_day: 4, target_all_for: 86400,
            target_days: 7, target_per_day: 4}
          - {all_for: 86400, days: 7, name: pg2, per_day: 4, target_all_for: 86400,
            target_days: 7, target_per_day: 4}
        'Example 6: List all protection groups in the eradication pending state.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup?pending_only=true'}
          response:
          - hgroups: null
            hosts: null
            name: pg3
            source: pure01
            targets: null
            time_remaining: 86384
            volumes: [v2, v3]
        'Example 7: List all protection groups and their space usage.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup?space=true'}
          response:
          - {name: pg1, snapshots: 0}
          - {name: pg2, snapshots: 0}
      properties:
        ex1: {type: object}
    get_1.13_pgroup_{pgroup}Examples:
      example:
        'Example 1: List protection group pg1.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup/pg1'}
          response:
            hgroups: null
            hosts: null
            name: pg1
            source: pure01
            targets: null
            volumes: [v1]
        'Example 2: List protection group pg3 even if it is in eradication pending state.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup/pg3?pending=true'}
          response:
            hgroups: null
            hosts: null
            name: pg3
            source: pure01
            targets: null
            time_remaining: 86384
            volumes: [v2, v3]
        'Example 3: List space usage for protection group pg1.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup/pg1?space=true'}
          response: {name: pg1, snapshots: 0}
        'Example 4: List schedule for protection group pg1.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/pgroup/pg1?schedule=true'}
          response: {name: pg1, replicate_at: null, replicate_blackout: null, replicate_enabled: false,
            replicate_frequency: 14400, snap_at: null, snap_enabled: false, snap_frequency: 3600}
      properties:
        ex1: {type: object}
    get_1.13_portExamples:
      example:
        'Example 1: List all ports':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/port'}
          response:
          - {failover: null, iqn: null, name: CT0.FC0, portal: null, wwn: '5001500150015000'}
          - {failover: null, iqn: null, name: CT0.FC1, portal: null, wwn: '5001500150015001'}
          - {failover: null, iqn: null, name: CT0.FC2, portal: null, wwn: '5001500150015002'}
          - {failover: null, iqn: null, name: CT0.FC3, portal: null, wwn: '5001500150015003'}
        'Example 2: List all initiator ports':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/port?initiators=true'}
          response:
          - {failover: null, iqn: null, portal: null, target: null, target_iqn: null,
            target_portal: null, target_wwn: null, wwn: '0000111122223333'}
          - {failover: null, iqn: null, portal: null, target: CT0.FC1, target_iqn: null,
            target_portal: null, target_wwn: '5001500150015001', wwn: 0008000800080008}
          - {failover: null, iqn: null, portal: null, target_wwn: '5001500150015003',
            wwn: '0000000000000000'}
      properties:
        ex1: {type: object}
    get_1.13_snmpExamples:
      example:
        'Example 1: List all SNMP managers':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/snmp'}
          response:
          - {auth_passphrase: null, auth_protocol: null, community: null, host: localhost,
            name: localhost, privacy_passphrase: null, privacy_protocol: null, user: null,
            version: v2c}
        'Example 2: List SNMP v3 engine ID':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/snmp?engine_id=true'}
          response: {engine_id: 80009e22053915caf6c5bc180da8437a}
      properties:
        ex1: {type: object}
    get_1.13_subnetExamples:
      example:
        'Example 1: List subnets':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/subnet'}
          response:
          - enabled: true
            gateway: null
            interfaces: []
            mtu: 1500
            name: subnet100
            prefix: 192.168.0.0/24
            services: []
            vlan: 100
      properties:
        ex1: {type: object}
    get_1.13_subnet_{subnet}Examples:
      example:
        'Example 1: List settings for subnet subnet100':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/subnet/subnet100'}
          response:
            enabled: true
            gateway: null
            interfaces: []
            mtu: 1500
            name: subnet100
            prefix: 192.168.0.0/24
            services: []
            vlan: 100
      properties:
        ex1: {type: object}
    get_1.13_volumeExamples:
      example:
        'Example 1: List all volumes':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume'}
          response:
          - {created: '2017-10-06T22:00:22Z', name: v1, serial: C35E0C1F5CE9414300011011,
            size: 1073741824, source: null}
          - {created: '2017-10-06T22:00:22Z', name: v2, serial: C35E0C1F5CE9414300011012,
            size: 2147483648, source: null}
          - {created: '2017-10-06T22:00:23Z', name: v3, serial: C35E0C1F5CE9414300011013,
            size: 3221225472, source: null}
        'Example 3: List all volumes pending eradication':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume?pending_only=true'}
          response:
          - {created: '2017-10-06T22:00:23Z', name: v4, serial: C35E0C1F5CE9414300011014,
            size: 4294967296, source: null, time_remaining: 86400}
        'Example 4: List all snapshots':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume?snap=true'}
          response:
          - {created: '2017-10-06T22:00:24Z', name: v3.1, serial: C35E0C1F5CE9414300011015,
            size: 3221225472, source: v3}
          - {created: '2017-10-06T22:00:24Z', name: v3.snap1, serial: C35E0C1F5CE9414300011016,
            size: 3221225472, source: v3}
          - {created: '2017-10-06T22:00:26Z', name: pg1.monday.v1, serial: C35E0C1F5CE9414300011017,
            size: 1073741824, source: v1}
          - {created: '2017-10-06T22:00:27Z', name: pg1.2.v1, size: 1073741824, source: v1}
        ? 'Example 6: List all volume snapshots that were created as part of protection
          group snapshots for protection groups pg1 and pg2.'
        : request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume?snap=true&pgrouplist=pg1,pg2'}
          response:
          - {created: '2017-10-06T22:00:26Z', name: pg1.monday.v1, serial: C35E0C1F5CE9414300011017,
            size: 1073741824, source: v1}
          - {created: '2017-10-06T22:00:27Z', name: pg1.2.v1, serial: C35E0C1F5CE9414300011018,
            size: 1073741824, source: v1}
          - {created: '2017-10-06T22:00:27Z', name: pg2.1.v1, serial: C35E0C1F5CE9414300011019,
            size: 1073741824, source: v1}
      properties:
        ex1: {type: object}
    get_1.13_volume_{volume}Examples:
      example:
        'Example 1: List details for volume v1':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume/v1'}
          response: {created: '2017-10-06T22:00:22Z', name: v1, serial: C35E0C1F5CE9414300011011,
            size: 1073741824, source: null}
        'Example 2: List snapshots of volume v3':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume/v3?snap=true'}
          response:
          - {created: '2017-10-06T22:00:24Z', name: v3.1, serial: C35E0C1F5CE9414300011015,
            size: 3221225472, source: v3}
          - {created: '2017-10-06T22:00:24Z', name: v3.snap1, serial: C35E0C1F5CE9414300011016,
            size: 3221225472, source: v3}
        'Example 3: List real-time performance data for volume v3.':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume/v3?action=monitor'}
          response:
          - {input_per_sec: 0, name: v3, output_per_sec: 0, reads_per_sec: 0, san_usec_per_read_op: 0,
            san_usec_per_write_op: 0, time: '2017-10-06T22:00:32Z', usec_per_read_op: 0,
            usec_per_write_op: 0, writes_per_sec: 0}
        ? 'Example 4: List volume snapshots of v1 that were created as part of protection
          group snapshots for protection groups pg1 and pg2.'
        : request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume/v1?snap=true&pgrouplist=pg1,pg2'}
          response:
          - {created: '2017-10-06T22:00:26Z', name: pg1.monday.v1, serial: C35E0C1F5CE9414300011017,
            size: 1073741824, source: v1}
          - {created: '2017-10-06T22:00:27Z', name: pg1.2.v1, serial: C35E0C1F5CE9414300011018,
            size: 1073741824, source: v1}
          - {created: '2017-10-06T22:00:27Z', name: pg2.1.v1, serial: C35E0C1F5CE9414300011019,
            size: 1073741824, source: v1}
      properties:
        ex1: {type: object}
    get_1.13_volume_{volume}_diffExamples:
      example:
        ? 'Example 1: List all block differences for volume snapshot v3.snap1 with
          a block size of 512 bytes and a length of 2 gigabytes.'
        : request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume/v3.snap1/diff?block_size=512&length=2G'}
          response: []
      properties:
        ex1: {type: object}
    get_1.13_volume_{volume}_hgroupExamples:
      example:
        'Example 1: List shared connections for volume v2':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume/v2/hgroup'}
          response:
          - {hgroup: hg2, host: null, lun: 15, name: v2, size: 2147483648}
      properties:
        ex1: {type: object}
    get_1.13_volume_{volume}_hostExamples:
      example:
        'Example 1: List private connections for volume v3':
          request: {body: '', method: GET, url: 'https://pure01.example.com/api/1.13/volume/v3/host'}
          response:
          - {host: h2, lun: 7, name: v3, size: 3221225472}
      properties:
        ex1: {type: object}
    post_1.13_alert_{address}Examples:
      example:
        'Example 1: Add a new alert recipient':
          request: {body: '', method: POST, url: 'https://pure01.example.com/api/1.13/alert/admin@example.com'}
          response: {enabled: true, name: admin@example.com}
      properties:
        ex1: {type: object}
    post_1.13_array_connectionExamples:
      example:
        'Example 1: Create a connection between array pure01 and array pure02 for replication purposes.':
          request:
            body:
              connection_key: $CONNECTION_KEY
              management_address: pure02.example.com
              type: [replication]
            method: POST
            url: https://pure01.example.com/api/1.13/array/connection
          response:
            array_name: pure02
            connected: true
            id: 4821b86a-5d22-4361-a567-620e88bf78c8
            management_address: pure02
            replication_address: [10.14.225.209]
            throttled: null
            type: [async-replication]
            version: 5.0.0
      properties:
        ex1: {type: object}
    post_1.13_auth_apitokenExamples:
      example:
        'Example 1: Create an API token':
          request:
            body: {password: pureuser, username: pureuser}
            method: POST
            url: https://pure01.example.com/api/1.13/auth/apitoken
          response: {api_token: d28f726a-1d62-9850-644d-1f08b59d6141}
      properties:
        ex1: {type: object}
    post_1.13_auth_sessionExamples:
      example:
        'Example 1: Create a REST session':
          request:
            body: {api_token: $APITOKEN}
            method: POST
            url: https://pure01.example.com/api/1.13/auth/session
          response: {username: os76}
      properties:
        ex1: {type: object}
    post_1.13_hgroup_{hgroup}Examples:
      example:
        'Example 1: Create host group hg3':
          request: {body: '', method: POST, url: 'https://pure01.example.com/api/1.13/hgroup/hg3'}
          response:
            hosts: []
            name: hg3
      properties:
        ex1: {type: object}
    post_1.13_hgroup_{hgroup}_volume_{volume}Examples:
      example:
        'Example 1: Connect volume v3 to host group hg3':
          request: {body: '', method: POST, url: 'https://pure01.example.com/api/1.13/hgroup/hg3/volume/v3'}
          response: {lun: 254, name: hg3, vol: v3}
      properties:
        ex1: {type: object}
    post_1.13_host_{host}Examples:
      example:
        'Example 1: Create host h4 with one wwn':
          request:
            body:
              wwnlist: [0000999900009999]
            method: POST
            url: https://pure01.example.com/api/1.13/host/h4
          response:
            iqn: []
            name: h4
            wwn: [0000999900009999]
      properties:
        ex1: {type: object}
    post_1.13_host_{host}_volume_{volume}Examples:
      example:
        'Example 1: Create a private connection between host h4 and volume v5_renamed':
          request: {body: '', method: POST, url: 'https://pure01.example.com/api/1.13/host/h4/volume/v5_renamed'}
          response: {lun: 1, name: h4, vol: v5_renamed}
      properties:
        ex1: {type: object}
    post_1.13_network_vif_{vlan_interface}Examples:
      example:
        'Example 1: Create a VLAN interface and associate it with subnet subnet100.':
          request:
            body: {address: 192.168.0.100, subnet: subnet100}
            method: POST
            url: https://pure01.example.com/api/1.13/network/vif/ct0.eth1.100
          response:
            address: 192.168.0.100
            enabled: true
            gateway: null
            hwaddr: 00:50:56:a5:2b:6d
            mtu: 1500
            name: ct0.eth1.100
            netmask: 255.255.255.0
            services: [iscsi, management]
            slaves: []
            speed: 10000000000
            subnet: subnet100
      properties:
        ex1: {type: object}
    post_1.13_pgroupExamples:
      example:
        'Example 1: Create a snapshot of protection group pg1.':
          request:
            body:
              snap: true
              source: [pg1]
            method: POST
            url: https://pure01.example.com/api/1.13/pgroup
          response:
          - {created: '2017-10-06T22:00:44Z', name: pg1.3, source: pg1}
        'Example 2: Create a snapshot of protection group pg1with a custom suffix and apply pg1''s retention policy to it.':
          request:
            body:
              apply_retention: true
              snap: true
              source: [pg1]
              suffix: crackle
            method: POST
            url: https://pure01.example.com/api/1.13/pgroup
          response:
          - {created: '2017-10-06T22:00:44Z', name: pg1.crackle, source: pg1}
      properties:
        ex1: {type: object}
    post_1.13_pgroup_{pgroup}Examples:
      example:
        'Example 1: Create protection group pg4.':
          request: {body: '', method: POST, url: 'https://pure01.example.com/api/1.13/pgroup/pg4'}
          response: {hgroups: null, hosts: null, name: pg4, source: pure01, targets: null,
            volumes: null}
        'Example 2: Create protection group pg5 with host h1.':
          request:
            body:
              hostlist: [h1]
            method: POST
            url: https://pure01.example.com/api/1.13/pgroup/pg5
          response:
            hgroups: null
            hosts: [h1]
            name: pg5
            source: pure01
            targets: null
            volumes: null
      properties:
        ex1: {type: object}
    post_1.13_subnet_{subnet}Examples:
      example:
        'Example 1: Create subnet mgmt with the specified gateway address and prefix':
          request:
            body: {gateway: 192.168.100.1, prefix: 192.168.100.0/24}
            method: POST
            url: https://pure01.example.com/api/1.13/subnet/mgmt
          response: {enabled: true, gateway: 192.168.100.1, interfaces: null, mtu: 1500,
            name: mgmt, prefix: 192.168.100.0/24, services: null, vlan: null}
      properties:
        ex1: {type: object}
    post_1.13_volumeExamples:
      example:
        'Example 1: Create snapshots of v5 and v6':
          request:
            body:
              snap: true
              source: [v5, v6]
            method: POST
            url: https://pure01.example.com/api/1.13/volume
          response:
          - {created: '2017-10-06T22:00:34Z', name: v5.1, serial: C35E0C1F5CE9414300011021,
            size: 5368709120, source: v5}
          - {created: '2017-10-06T22:00:34Z', name: v6.4130, serial: C35E0C1F5CE9414300011022,
            size: 1073741824, source: v6}
        'Example 2: Create snapshots of v5 and v6 with a custom suffix':
          request:
            body:
              snap: true
              source: [v5, v6]
              suffix: crackle
            method: POST
            url: https://pure01.example.com/api/1.13/volume
          response:
          - {created: '2017-10-06T22:00:35Z', name: v5.crackle, serial: C35E0C1F5CE9414300011023,
            size: 5368709120, source: v5}
          - {created: '2017-10-06T22:00:35Z', name: v6.crackle, serial: C35E0C1F5CE9414300011024,
            size: 1073741824, source: v6}
      properties:
        ex1: {type: object}
    post_1.13_volume_{volume}Examples:
      example:
        'Example 1: Create a new volume':
          request:
            body: {size: 5G}
            method: POST
            url: https://pure01.example.com/api/1.13/volume/v5
          response: {created: '2017-10-06T22:00:34Z', name: v5, serial: C35E0C1F5CE941430001101E,
            size: 5368709120, source: null}
        'Example 2: Create v6 by copying v1':
          request:
            body: {source: v1}
            method: POST
            url: https://pure01.example.com/api/1.13/volume/v6
          response: {created: '2017-10-06T22:00:34Z', name: v6, serial: C35E0C1F5CE941430001101F,
            size: 1073741824, source: v1}
        'Example 3: Overwrite v6 by copying v1':
          request:
            body: {overwrite: true, source: v1}
            method: POST
            url: https://pure01.example.com/api/1.13/volume/v6
          response: {created: '2017-10-06T22:00:34Z', name: v6, serial: C35E0C1F5CE941430001101F,
            size: 1073741824, source: v1}
      properties:
        ex1: {type: object}
    put_1.13_alert_{address}Examples:
      example:
        'Example 1: Disable a single alert recipient':
          request:
            body: {enabled: false}
            method: PUT
            url: https://pure01.example.com/api/1.13/alert/admin@example.com
          response: {enabled: false, name: admin@example.com}
      properties:
        ex1: {type: object}
    put_1.13_array_console_lockExamples:
      example:
        'Example 1: Enable console lock':
          request:
            body: {enabled: true}
            method: PUT
            url: https://pure01.example.com/api/1.13/array/console_lock
          response: {console_lock: enabled}
        'Example 2: Disable console lock':
          request:
            body: {enabled: false}
            method: PUT
            url: https://pure01.example.com/api/1.13/array/console_lock
          response: {console_lock: disabled}
      properties:
        ex1: {type: object}
    put_1.13_array_phonehomeExamples:
      example:
        'Example 1: Enable phonehome':
          request:
            body: {enabled: true}
            method: PUT
            url: https://pure01.example.com/api/1.13/array/phonehome
          response: {phonehome: enabled}
        'Example 2: Disable phonehome':
          request:
            body: {enabled: false}
            method: PUT
            url: https://pure01.example.com/api/1.13/array/phonehome
          response: {phonehome: disabled}
      properties:
        ex1: {type: object}
    put_1.13_directoryserviceExamples:
      example:
        'Example 1: Disable the directory service':
          request:
            body: {enabled: false}
            method: PUT
            url: https://pure01.example.com/api/1.13/directoryservice
          response:
            base_dn: DC=ad1,DC=example,DC=com
            bind_password: '****'
            bind_user: readonlyuser
            check_peer: false
            enabled: false
            uri: ['ldaps://ad1.example.com']
        'Example 2: Enable the directory service':
          request:
            body: {enabled: true}
            method: PUT
            url: https://pure01.example.com/api/1.13/directoryservice
          response:
            base_dn: DC=ad1,DC=example,DC=com
            bind_password: '****'
            bind_user: readonlyuser
            check_peer: false
            enabled: true
            uri: ['ldaps://ad1.example.com']
      properties:
        ex1: {type: object}
    put_1.13_dnsExamples:
      example:
        'Example 1: Modify DNS settings':
          request:
            body:
              domain: example.com
              nameservers: [192.168.1.1, 192.168.0.1]
            method: PUT
            url: https://pure01.example.com/api/1.13/dns
          response:
            domain: example.com
            nameservers: [192.168.0.1, 192.168.1.1]
      properties:
        ex1: {type: object}
    put_1.13_hardware_{component}Examples:
      example:
        'Example 1: Turn on ID light for SH0.BAY0':
          request:
            body: {identify: 'on'}
            method: PUT
            url: https://pure01.example.com/api/1.13/hardware/SH0.BAY0
          response: {identify: 'on', index: 0, name: SH0.BAY0, slot: null}
        'Example 2: Turn off ID light':
          request:
            body: {identify: 'off'}
            method: PUT
            url: https://pure01.example.com/api/1.13/hardware/SH0.BAY0
          response: {identify: 'off', index: 0, name: SH0.BAY0, slot: null}
      properties:
        ex1: {type: object}
    put_1.13_hgroup_{hgroup}Examples:
      example:
        'Example 1: Rename host group':
          request:
            body: {name: hg4}
            method: PUT
            url: https://pure01.example.com/api/1.13/hgroup/hg3
          response:
            hosts: []
            name: hg4
        'Example 2: Set host members for hgroup hg4':
          request:
            body:
              hostlist: [h3]
            method: PUT
            url: https://pure01.example.com/api/1.13/hgroup/hg4
          response:
            hosts: [h3]
            name: hg4
        'Example 3: Remove host members':
          request:
            body:
              remhostlist: [h3]
            method: PUT
            url: https://pure01.example.com/api/1.13/hgroup/hg4
          response:
            hosts: []
            name: hg4
      properties:
        ex1: {type: object}
    put_1.13_host_{host}Examples:
      example:
        'Example 1: Replace list of wwns':
          request:
            body:
              wwnlist: ['1111222233334444', '2222333344445555']
            method: PUT
            url: https://pure01.example.com/api/1.13/host/h4
          response:
            hgroup: null
            iqn: []
            name: h4
            wwn: ['1111222233334444', '2222333344445555']
        'Example 2: Add two more wwns to list':
          request:
            body:
              addwwnlist: ['4444333322221111', '5555444433332222']
            method: PUT
            url: https://pure01.example.com/api/1.13/host/h4
          response:
            hgroup: null
            iqn: []
            name: h4
            wwn: ['1111222233334444', '2222333344445555', '4444333322221111', '5555444433332222']
        'Example 3: Remove one wwn from list':
          request:
            body:
              remwwnlist: ['2222333344445555']
            method: PUT
            url: https://pure01.example.com/api/1.13/host/h4
          response:
            hgroup: null
            iqn: []
            name: h4
            wwn: ['1111222233334444', '4444333322221111', '5555444433332222']
        'Example 4: Rename a host':
          request:
            body: {name: h5}
            method: PUT
            url: https://pure01.example.com/api/1.13/host/h4
          response: {name: h5}
      properties:
        ex1: {type: object}
    put_1.13_network_{network_component}Examples:
      example:
        'Example 1: Disable network interface ct0.eth1':
          request:
            body: {enabled: false}
            method: PUT
            url: https://pure01.example.com/api/1.13/network/ct0.eth1
          response:
            address: null
            enabled: false
            gateway: null
            hwaddr: 00:50:56:a5:2b:6d
            mtu: 1500
            name: ct0.eth1
            netmask: null
            services: [iscsi, management]
            slaves: []
            speed: 10000000000
            subnet: null
        'Example 2: Enable network interface ct0.eth1':
          request:
            body: {enabled: true}
            method: PUT
            url: https://pure01.example.com/api/1.13/network/ct0.eth1
          response:
            address: null
            enabled: true
            gateway: null
            hwaddr: 00:50:56:a5:2b:6d
            mtu: 1500
            name: ct0.eth1
            netmask: null
            services: [iscsi, management]
            slaves: []
            speed: 10000000000
            subnet: null
      properties:
        ex1: {type: object}
    put_1.13_pgroup_{pgroup}Examples:
      example:
        'Example 1: Rename protection group':
          request:
            body: {name: pg6}
            method: PUT
            url: https://pure01.example.com/api/1.13/pgroup/pg2
          response: {name: pg6}
        'Example 2: Set host members':
          request:
            body:
              hostlist: [h3]
            method: PUT
            url: https://pure01.example.com/api/1.13/pgroup/pg4
          response:
            hgroups: null
            hosts: [h3]
            name: pg4
            source: pure01
            targets: null
            volumes: null
        'Example 3: Enables the replication schedule for pg4':
          request:
            body: {replicate_enabled: true}
            method: PUT
            url: https://pure01.example.com/api/1.13/pgroup/pg4
          response: {name: pg4, replicate_at: null, replicate_blackout: null, replicate_enabled: true,
            replicate_frequency: 14400, snap_at: null, snap_enabled: false, snap_frequency: 3600}
        'Example 4: Sets a replication blackout window from 2am to 4am (in seconds) for pg4':
          request:
            body:
              replicate_blackout: {end: 14400, start: 7200}
            method: PUT
            url: https://pure01.example.com/api/1.13/pgroup/pg4
          response:
            name: pg4
            replicate_at: null
            replicate_blackout:
            - {end: 14400, start: 7200}
            replicate_enabled: true
            replicate_frequency: 14400
            snap_at: null
            snap_enabled: false
            snap_frequency: 3600
        ? 'Example 5: Sets a retention policy to retain all snapshots for 3 days (in
          minutes), and keep 12 snapshots per day after the all_for period ends'
        : request:
            body: {all_for: 4320, per_day: 12}
            method: PUT
            url: https://pure01.example.com/api/1.13/pgroup/pg4
          response: {all_for: 4320, days: 7, name: pg4, per_day: 12, target_all_for: 86400,
            target_days: 7, target_per_day: 4}
      properties:
        ex1: {type: object}
    put_1.13_subnet_{subnet}Examples:
      example:
        'Example 1: Change VLAN ID for subnet mgmt':
          request:
            body: {vlan: 100}
            method: PUT
            url: https://pure01.example.com/api/1.13/subnet/mgmt
          response:
            enabled: true
            gateway: 192.168.100.1
            interfaces: []
            mtu: 1500
            name: mgmt
            prefix: 192.168.100.0/24
            services: []
            vlan: 100
        'Example 2: Clear gateway for subnet mgmt':
          request:
            body: {gateway: null}
            method: PUT
            url: https://pure01.example.com/api/1.13/subnet/mgmt
          response:
            enabled: true
            gateway: null
            interfaces: []
            mtu: 1500
            name: mgmt
            prefix: 192.168.100.0/24
            services: []
            vlan: 100
        'Example 3: Disable subnet mgmt':
          request:
            body: {enabled: false}
            method: PUT
            url: https://pure01.example.com/api/1.13/subnet/mgmt
          response:
            enabled: false
            gateway: null
            interfaces: []
            mtu: 1500
            name: mgmt
            prefix: 192.168.100.0/24
            services: []
            vlan: 100
        'Example 4: Rename subnet mgmt':
          request:
            body: {name: managementSubnet}
            method: PUT
            url: https://pure01.example.com/api/1.13/subnet/mgmt
          response:
            enabled: false
            gateway: null
            interfaces: []
            mtu: 1500
            name: managementSubnet
            prefix: 192.168.100.0/24
            services: []
            vlan: 100
      properties:
        ex1: {type: object}
    put_1.13_volume_{volume}Examples:
      example:
        'Example 1: Set the provisioned size for volume v5 to 10G':
          request:
            body: {size: 10G}
            method: PUT
            url: https://pure01.example.com/api/1.13/volume/v5
          response: {name: v5, size: 10737418240}
        'Example 2: Truncate volume v5 to 1073741824 bytes':
          request:
            body: {size: 1073741824, truncate: true}
            method: PUT
            url: https://pure01.example.com/api/1.13/volume/v5
          response: {name: v5, size: 1073741824}
        'Example 3: Rename volume v5 to v5_renamed':
          request:
            body: {name: v5_renamed}
            method: PUT
            url: https://pure01.example.com/api/1.13/volume/v5
          response: {name: v5_renamed}
        'Example 4: Rename suffix of volume snapshot v5.snap from snap to snap2':
          request:
            body: {name: v3.snap2}
            method: PUT
            url: https://pure01.example.com/api/1.13/volume/v3.snap1
          response: {name: v3.snap2}
      properties:
        ex1: {type: object}
info: {description: "# Authentication\nUse an API-Token to start a session, that returns\
    \ an session cookie which expires in 30 minutes by default.\n\n## Error Codes\n\
    Use HTTP Response codes to determine command results.  Error message json formats\
    \ are different depending on the endpoint.\n\n## Best practices\nYou may want\
    \ to take a look at the [best practices docs here](https://support.purestorage.com/FlashArray/PurityFA/Purity_FA_REST_API/Reference/Pure_Storage_REST_API_Best_Practices).\
    \ \n\n## Pagenation\nPagenation/filtering information is not shown heret.  However,\
    \ it is available for some endpoints. Please see the PDF docs.\n\n# \"Try it Out\"\
    \ (awesome feature!)\n\n## CORS\nThe Try will NOT work without a [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\
    \ bypass. \\\nThe ONLY browser that works is firefox, and you need to install\
    \ the \\\nFirefox [CORS Everywhere](https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/)\
    \ extension \\ \n\nTry It Out **WILL NOT** work without a CORS bypass plugin.\
    \  (If anyone can get chrome to work please let me know and I'll include those\
    \ instructions. ) \n\n## IP\nNext, put in your Array IP where it says change me\
    \ below.  \n\n## Accept Security Certificate\nOpen your array IP in a new tab\
    \ on your browser and accept the security certificate and ensure you can reach\
    \ it's IP/hostname.\n\n## Test connectivity\nTest /api_version  - If this fails\
    \ retry the steps above.\n\n## Authenticate \nUse POST ../auth/session , and put\
    \ in your API Key.  (to get API Key, you can do POST ../auth/apitoken with your\
    \ user/pass) \\\nThis will return your API key, or you can get it from the Web\
    \ UI.  After doing a POST ../auth/session, the array returns \\\na cookie which\
    \ is handled by the browser which enables additional API calls.  Session cookies\
    \ expire by default after 30 minutes.", title: Pure FlashArray API, version: /1.13/}
openapi: 3.0.1
paths:
  /1.13/admin:
    get:
      description: Lists public key and API token information for all users.Set at
        least one parameter to true.
      operationId: get/1.13/admin
      parameters:
      - description: If set to true, displays a list of users that have REST API access
          and the dates in which the API tokens werecreated.Optional.
        in: query
        name: api_token
        schema: {type: boolean}
      - description: If api_token is set to true, set the expose parameter to true
          to unmask the current user's API token. Doesnot unmmask other users' tokens.Optional.
        in: query
        name: expose
        schema: {type: boolean}
      - description: If set to true, displays a list of users that have public key
          access.Optional.
        in: query
        name: publickey
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_adminExamples'}
          description: ''
      tags: [Users]
    put:
      description: Clears all user permission cache entries.User permission cache
        entries are also automatically updated when the user starts a new session.
      operationId: put/1.13/admin
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: 'When set to refresh, refreshes all user permission
                    cache entries.', type: string}
                clear: {description: 'When set to true, clears the entire user permission
                    cache.Required. Used with the action parameter.', type: boolean}
              required: [action]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Users]
  /1.13/admin/{user}:
    get:
      description: Lists public key information for the specified user.
      operationId: get/1.13/admin/{user}
      parameters:
      - in: path
        name: user
        required: true
        schema: {type: string}
      - description: If set to true, displays the public key information for the specified
          user.
        in: query
        name: publickey
        required: true
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Users]
    put:
      description: Sets the password or public key or refreshes the user permission
        cache entries for the specified user.Either the publickey, password, or action
        parameter must be specified.
      operationId: put/1.13/admin/{user}
      parameters:
      - in: path
        name: user
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: 'When set to refresh, refreshes the user permission
                    cache entries for the specified user.Cache entries are also automatically
                    updated when the user starts a new session.Optional.', type: string}
                clear: {description: 'If the action parameter is set to "refresh",
                    set the clear parameter to true to clear the user permissioncache
                    for the specified user.', type: boolean}
                old_password: {description: '', type: string}
                password: {description: 'Optional. Used with the action parameter.Used
                    with the password parameter to change the password for the single,
                    local administrative accountpureuser. Set the parameter to the
                    old password.Required if the password parameter is set.Used with
                    the old_password parameter to change the password for the single,
                    local administrative accountpureuser. The value must be between
                    1 and 32 characters in length and be entered from a standard English(U.S.)
                    keyboard.Optional.', type: string}
                publickey: {description: 'Changes the public key for SSH access for
                    the specified user. Only system administrators can change publickeys
                    on behalf of other users. If no users are provided as arguments,
                    a request to change the public key will befor the administrator
                    issuing the request and a request to display set public keys will
                    show all users with a publickey configured.Optional.', type: string}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Users]
  /1.13/admin/{user}/apitoken:
    delete:
      description: Deletes API token for the specified user.
      operationId: delete/1.13/admin/{user}/apitoken
      parameters:
      - in: path
        name: user
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Users]
    get:
      description: Lists the API token for the specified user.
      operationId: get/1.13/admin/{user}/apitoken
      parameters:
      - in: path
        name: user
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Users]
    post:
      description: Creates an API token for the specified user.
      operationId: post/1.13/admin/{user}/apitoken
      parameters:
      - in: path
        name: user
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties: {}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Users]
  /1.13/alert:
    get:
      description: Lists email recipients that are designated to receive Purity alert
        messages.
      operationId: get/1.13/alert
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_alertExamples'}
          description: ''
      tags: [Alerts]
    put:
      description: Tests the ability of the array to send alert messages to all of
        the designated email addresses.
      operationId: put/1.13/alert
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: Set the parameter to "test" to test the ability
                    of the array to send alert messages to all of the designatedemail
                    addresses. Verification of successful test message transmission
                    is done at the destination., type: string}
              required: [action]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Alerts]
  /1.13/alert/{address}:
    delete:
      description: Deletes an email address from the list of addresses designated
        to receive Purity alert messages. You cannot delete the built-in flasharray-alerts@purestorage.com
        address.
      operationId: delete/1.13/alert/{address}
      parameters:
      - in: path
        name: address
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_alert_{address}Examples'}
          description: ''
      tags: [Alerts]
    get:
      description: Lists information about the specified email recipient.
      operationId: get/1.13/alert/{address}
      parameters:
      - in: path
        name: address
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_alert_{address}Examples'}
          description: ''
      tags: [Alerts]
    post:
      description: Designates any valid email address to receive Purity alert messages.Up
        to 20 addresses can be designated in an array (19 in addition to the built-in
        flasharray-alerts@purestorage.com address.)
      operationId: post/1.13/alert/{address}
      parameters:
      - in: path
        name: address
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties: {}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_alert_{address}Examples'}
          description: ''
      tags: [Alerts]
    put:
      description: Tests, enables, and disables the transmission of alert messages
        to the specified email address.At least one parameter must be specified.
      operationId: put/1.13/alert/{address}
      parameters:
      - in: path
        name: address
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: 'Set the parameter to "test" to test the ability
                    of the array to send alert messages to the specified emailaddress,
                    designated or not. Verification of successful test message transmission
                    is done at the destination.Optional.', type: string}
                enabled: {description: Enables (true) or disables (false) the transmission
                    of alert messages to the specified email address.Optional., type: boolean}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_alert_{address}Examples'}
          description: ''
      tags: [Alerts]
  /1.13/app:
    get:
      description: Lists the apps that are installed on the array, along with the
        attributes of each app.
      operationId: get/1.13/app
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Apps]
  /1.13/array:
    get:
      description: Lists the attributes for the array, including the array name, Purity
        version and Purity revision number. Can also display historical performance
        or capacitydata.
      operationId: get/1.13/array
      parameters:
      - description: If set to monitor, displays the following real-time or historical
          performance data:san_usec_per_read_op - average time, measured in microseconds,
          required to transfer data fromthe array to the initiator.san_usec_per_write_op
          - average time, measured in microseconds, required to transfer data fromthe
          initiator to the array.usec_per_read_op - average time, measured in microseconds,
          it takes the array to process an I/Oread request.usec_per_write_op - average
          time, measured in microseconds, it takes the array to process an I/Owrite
          request.queue_depth - average number of queued I/O requests.reads_per_sec
          - number of read requests processed per second.writes_per_sec - number of
          write requests processed per second.input_per_sec - number of bytes written
          per second.output_per_sec - number of bytes read per second.Optional.
        in: query
        name: action
        schema: {type: string}
      - description: Displays the "message of the day" (MOTD) text that is sent to
          all Purity users. The banner message isdisplayed in the login pane of the
          Purity GUI and via SSH after users log in.Optional.
        in: query
        name: banner
        schema: {type: boolean}
      - description: Displays a connection key that can be used to connect to this
          array.Optional.
        in: query
        name: connection_key
        schema: {type: boolean}
      - description: Displays the mode and status of each controller on the array.
          For arrays to which a second controller has neverbeen connected, only a
          single controller mode is displayed. Once an additional controller has been
          connected,its information is always shown.Optional.
        in: query
        name: controllers
        schema: {type: boolean}
      - description: 'If the action parameter is set to monitor, set this parameter
          to display historical performance data at thespecified resolution.If the
          space parameter is set to true, set this parameter to display historical
          space data at the specifiedresolution.Valid historical values are: 1h, 3h,
          24h, 7d, 30d, 90d, and 1y.Optional.'
        in: query
        name: historical
        schema: {type: string}
      - description: Displays the idle time limit, in minutes, of the Purity GUI and
          CLI sessions. Users are automatically logged out asession that exceeds the
          idle timeout limit.Optional.
        in: query
        name: idle_timeout
        schema: {type: boolean}
      - description: Displays the hostnames or IP addresses of the NTP servers currently
          being used by the array to maintainreference time.Optional.
        in: query
        name: ntpserver
        schema: {type: boolean}
      - description: Displays the current state of the Purity phonehome automatic
          hourly log transmission facility as enabled ordisabled.Optional.
        in: query
        name: phonehome
        schema: {type: boolean}
      - description: Displays the proxy host for the phonehome facility when HTTPS
          is the phonehome protocol (the phonehomefacility itself determines which
          protocol to use).Optional.
        in: query
        name: proxy
        schema: {type: boolean}
      - description: Displays the hostname or IP address of the electronic mail relay
          server currently being used as a forwardingpoint for email alerts generated
          by the array.Optional.
        in: query
        name: relayhost
        schema: {type: boolean}
      - description: Displays the amount of time (in seconds) that can lapse during
          an I/O interruption before the target ports log outof the fabric. The default
          timeout value is 60 seconds.Optional.
        in: query
        name: scsi_timeout
        schema: {type: boolean}
      - description: Displays domain name from which Purity sends email alert messages.Optional.
        in: query
        name: senderdomain
        schema: {type: boolean}
      - description: Displays the amount of usable physical storage on the array and
          the amount of storage occupied by data andmetadata.Optional.
        in: query
        name: space
        schema: {type: boolean}
      - description: Displays remote syslog servers for delivering notifications.Optional.
        in: query
        name: syslogserver
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_arrayExamples'}
          description: ''
      tags: [Array]
    put:
      description: Modifies the attributes for the array.At least one parameter must
        be specified.
      operationId: put/1.13/array
      requestBody:
        content:
          application/json:
            schema:
              properties:
                banner: {description: Sets a common "message of the day" (MOTD) that
                    is sent to all Purity users. The banner message is displayedin
                    the login pane of the Purity GUI and via SSH after users log in.Optional.,
                  type: string}
                idle_timeout: {description: 'Sets the idle time limit, in minutes,
                    of the Purity GUI and CLI sessions. Valid values are between 5
                    and 180minutes. The default timeout value is 30 minutes. Specifying
                    a value of zero disables the automatic log-offfeature. Changes
                    made to the idle_timeout value do not apply to existing Purity
                    sessions.Optional.', type: integer}
                name: {description: Renames the array.Optional., type: string}
                ntpserver:
                  description: Specifies alternate NTP servers, by IP address or hostname,
                    assigned as the array source for reference time.Supersedes any
                    previous NTP server assignments.If specifying an IP address, for
                    IPv4, specify the IP address in the form ddd.ddd.ddd.ddd, where
                    ddd is anumber ranging from 0 to 255 representing a group of 8
                    bits. For IPv6, specify the IP address in the formxxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx,
                    where xxxx is a hexadecimal number representing agroup of 16 bits.
                    When specifying an IPv6 address, consecutive fields of zeros can
                    be shortened by replacingthe zeros with a double colon (::).Optional.
                  items: {type: object}
                  type: array
                proxy: {description: 'Sets the proxy host for the phonehome facility
                    when HTTPS is the phonehome protocol (the phonehome facilityitself
                    determines which protocol to use). The format for the value is
                    https://HOSTNAME:PORT, whereHOSTNAME is the name of the proxy
                    host and PORT is the TCP/IP port number used by the proxy host.Optional.',
                  type: string}
                relayhost: {description: 'Sets the hostname or IP address of the electronic
                    mail relay server currently being used as a forwarding pointfor
                    email alerts generated by the array.If specifying an IP address,
                    enter the IPv4 or IPv6 address.For IPv4, specify the IP address
                    in the form ddd.ddd.ddd.ddd, where ddd is a number ranging from
                    0 to 255representing a group of 8 bits. If a port number is also
                    specified, append it to the end of the address in theformat ddd.ddd.ddd.ddd:PORT,
                    where PORT represents the port number.For IPv6, specify the IP
                    address in the form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx, where
                    xxxxis a hexadecimal number representing a group of 16 bits. Consecutive
                    fields of zeros can be shortened byreplacing the zeros with a
                    double colon (::). If a port number is also specified, enclose
                    the entire address insquare brackets ([]) and append the port
                    number to the end of the address. For example,[xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx]:PORT,
                    where PORT represents the port number.Optional.', type: string}
                scsi_timeout: {description: 'Changes the amount of time, in seconds,
                    that can lapse during an I/O interruption before the target ports
                    logout of the fabric. The default timeout value is 60 seconds.Changing
                    the default timeout value may cause an initiator to mistakenly
                    interpret the status of the FlashArray asfailed or generate a
                    host timeout. Contact the Pure Storage Support team before you
                    change thescsi_timeout value.Optional.', type: integer}
                senderdomain: {description: Sets the domain name from which Purity
                    sends email alert messages.Optional., type: string}
                syslogserver:
                  description: Specifies the remote syslog servers for delivering
                    notifications. For example, tcp://MyHost.com.Specify the URI in
                    the format PROTOCOL://HOSTNAME:PORT.PROTOCOL is "tcp", "tls",
                    or "udp".HOSTNAME is the syslog server hostname or IP address.
                    If specifying an IP address, for IPv4, specify the IPaddress in
                    the form ddd.ddd.ddd.ddd, where ddd is a number ranging from 0
                    to 255 representing a group of8 bits. For IPv6, specify the IP
                    address in the form [xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx],where
                    xxxx is a hexadecimal number representing a group of 16 bits.
                    Enclose the entire address in squarebrackets ([]). Consecutive
                    fields of zeros can be shortened by replacing the zeros with a
                    double colon (::).PORT is the port at which the server is listening.
                    If a port number is specified, append it to the end of theaddress.
                    If the port is not specified, it defaults to 514.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Array]
  /1.13/array/connection:
    get:
      description: Lists connected arrays.
      operationId: get/1.13/array/connection
      parameters:
      - description: Displays (true) outgoing bandwidth throttling information.Optional.
        in: query
        name: throttle
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_array_connectionExamples'}
          description: ''
      tags: [Array]
    post:
      description: Creates a connection between the current array and the specified
        array.
      operationId: post/1.13/array/connection
      requestBody:
        content:
          application/json:
            schema:
              properties:
                connection_key: {description: The connection_key of the array to be
                    connected., type: string}
                management_address: {description: The management address of the array
                    to be connected., type: string}
                replication_address: {description: The replication address of the
                    array to be connected.Optional., type: string}
                type:
                  description: The type(s) of connection desired. The only option
                    supported in this version is 'replication'.
                  items: {type: object}
                  type: array
              required: [connection_key, management_address, type]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_array_connectionExamples'}
          description: ''
      tags: [Array]
  /1.13/array/connection/{connection}:
    delete:
      description: Disconnects the current array from the specified array.
      operationId: delete/1.13/array/connection/{connection}
      parameters:
      - in: path
        name: connection
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_array_connection_{connection}Examples'}
          description: ''
      tags: [Array]
    put:
      description: Modifies the bandwidth throttling attributes for a connected array.At
        least one parameter must be specified.
      operationId: put/1.13/array/connection/{connection}
      parameters:
      - in: path
        name: connection
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                default_limit: {description: 'number or string Default maximum bandwidth
                    threshold for outbound traffic. Once exceeded, bandwidth throttling
                    occurs.Enter the size as a number (bytes) or as a string with
                    a single character unit symbol. Valid unit symbols are K,M, G,
                    representing KiB, MiB, GiB, respectively, where "Ki" denotes 2^10,
                    "Mi" denotes 2^20, and so on. If theunit symbol is not specified,
                    the unit defaults to bytes.Optional.', type: string}
                window: {description: 'Range of time during which --window_limit threshold
                    is in effect.The start and end times must be set on the hour.Enter
                    the time range with the start and end attributes, both measured
                    in seconds, where start representsthe window start time and end
                    represents the window end time.Optional.', type: object}
                window_limit: {description: 'number or string Maximum bandwidth threshold
                    for outbound traffic during the specified window_limit time range.
                    Onceexceeded, bandwidth throttling occurs.Enter the size as a
                    number (bytes) or as a string with a single character unit symbol.
                    Valid unit symbols are K,M, G, representing KiB, MiB, GiB, respectively,
                    where "Ki" denotes 2^10, "Mi" denotes 2^20, and so on. If theunit
                    symbol is not specified, the unit defaults to bytes.Optional.',
                  type: string}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Array]
  /1.13/array/console_lock:
    get:
      description: Displays the status of the console lock.
      operationId: get/1.13/array/console_lock
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_array_console_lockExamples'}
          description: ''
      tags: [Array]
    put:
      description: Enables or disables root login through the console.At least one
        parameter must be specified.
      operationId: put/1.13/array/console_lock
      requestBody:
        content:
          application/json:
            schema:
              properties:
                enabled: {description: Enables (true) or disables (false) the console
                    lock which prevents the root user from logging in through thesystem
                    console.Optional., type: boolean}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_array_console_lockExamples'}
          description: ''
      tags: [Array]
  /1.13/array/phonehome:
    get:
      description: Lists information about the status of the transmission logs for
        the phonehome facility.
      operationId: get/1.13/array/phonehome
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_array_phonehomeExamples'}
          description: ''
      tags: [Array]
    put:
      description: Performs phonehome actions.At least one parameter must be specified.
      operationId: put/1.13/array/phonehome
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: 'Transmits event logs stored in the array to
                    the Pure Storage Support team via the phonehome channel. Specifythe
                    phonehome log time period as any of the following: send_all, send_today,
                    send_yesterday, cancel.Optional.', type: string}
                enabled: {description: Enables (true) or disables (false) the automatic
                    hourly transmission of array logs to the Pure StorageSupport team.Optional.,
                  type: boolean}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_array_phonehomeExamples'}
          description: ''
      tags: [Array]
  /1.13/array/remoteassist:
    get:
      description: Lists information about the status (enabled or disabled) of a remote
        assist session.
      operationId: get/1.13/array/remoteassist
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_array_remoteassistExamples'}
          description: ''
      tags: [Array]
    put:
      description: Enables or disables a remote assist session.
      operationId: put/1.13/array/remoteassist
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: Enables ("connect") or disables ("disconnect")
                    a remote assist session., type: string}
              required: [action]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Array]
  /1.13/auth/apitoken:
    post:
      description: Generates a REST API token that can be used to create a REST session.API
        tokens are tied to a particular administrative account. Each administrator
        has permission to manage their own API token. Administrators cannot managetokens
        on behalf of other users.
      operationId: post/1.13/auth/apitoken
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password: {description: Purity user login password used to generate
                    the REST API token., type: string}
                username: {description: Purity user login name used to generate the
                    REST API token. Sometimes referred to as sAMAccountName., type: string}
              required: [password, username]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_auth_apitokenExamples'}
          description: ''
      tags: [Authentication]
  /1.13/auth/session:
    delete:
      description: Deletes (invalidates) the REST session.
      operationId: delete/1.13/auth/session
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_auth_sessionExamples'}
          description: ''
      tags: [Authentication]
    post:
      description: Creates a REST session using the REST API token.
      operationId: post/1.13/auth/session
      requestBody:
        content:
          application/json:
            schema:
              properties:
                api_token: {description: REST API token used to create a REST session.,
                  type: string}
              required: [api_token]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_auth_sessionExamples'}
          description: ''
      tags: [Authentication]
  /1.13/cert:
    get:
      description: Lists all available certificates.The REST API call returns the
        attributes of all certificates.
      operationId: get/1.13/cert
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SSL]
  /1.13/cert/certificate_signing_request/{certificate}:
    get:
      description: Constructs a certificate signing request (CSR) for signing by a
        certificate authority (CA).
      operationId: get/1.13/cert/certificate_signing_request/{certificate}
      parameters:
      - in: path
        name: certificate
        required: true
        schema: {type: string}
      - description: Sets the common name of the CSR. The common name must be the
          fully qualified domain name of the currentarray. For example, for https://purearray.example.com,
          the common name must be purearray.example.com or*.example.com for a wildcard
          certificate. It can also be the management IP address of the array or the
          shortname of the current array. It can't have more than 64 characters.Optional.
        in: query
        name: common_name
        schema: {type: string}
      - description: Sets the country name of the CSR. The country name represents
          the two-letter ISO code for the country whereyour organization is located.Optional.
        in: query
        name: country
        schema: {type: string}
      - description: Sets the email address used to contact your organization.Optional.
        in: query
        name: email
        schema: {type: string}
      - description: Sets the name of the city where your organization is located.Optional.
        in: query
        name: locality
        schema: {type: string}
      - description: Sets the name of your organization. Enter the full and exact
          legal name of your organization. The organizationname should not be abbreviated
          and should include suffixes such as Inc, Corp, or LLC. For example,'PureStorage,
          Inc.'Optional.
        in: query
        name: organization
        schema: {type: string}
      - description: Sets the name of the department within your organization that
          you want to appear in the certificate.Optional.
        in: query
        name: organizational_unit
        schema: {type: string}
      - description: Sets the name of the state or province where your organization
          is located.Optional.
        in: query
        name: state
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SSL]
  /1.13/cert/{certificate}:
    delete:
      description: Delete a certificate. The 'management' certificate may not be deleted.The
        REST API call returns the name of the certificate that was deleted.
      operationId: delete/1.13/cert/{certificate}
      parameters:
      - in: path
        name: certificate
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SSL]
    get:
      description: 'Lists attributes or exports the specified certificate.If the request
        does not include parameters, the REST API call returns the attributes of the
        certificate. Include parameters to export the respective certificates.Note:
        the name ''management'' refers to the single certificate which this command
        managed in versions 1.11 and older.'
      operationId: get/1.13/cert/{certificate}
      parameters:
      - in: path
        name: certificate
        required: true
        schema: {type: string}
      - description: If set to true, exports the current CA certificate.Optional.
        in: query
        name: ca_certificate
        schema: {type: boolean}
      - description: If set to true, exports the current certificate.Optional.
        in: query
        name: certificate
        schema: {type: boolean}
      - description: If set to true, exports the current intermediate certificate.Optional.
        in: query
        name: intermediate_certificate
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SSL]
    post:
      description: Creates (and optionally initializes) a new certificate.Creating
        a new self-signed certificate or importing a certificate does not affect existing
        certificates, and there may not already be a certificate with the samename.
        Either the certificate or self-signed parameter must be specified.
      operationId: post/1.13/cert/{certificate}
      parameters:
      - in: path
        name: certificate
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ca_certificate: {description: Used with the certificate parameter
                    to specify the CA certificate to import.Optional., type: string}
                certificate: {description: Imports a certificate signed by a certificate
                    authority.Optional., type: string}
                common_name: {description: 'Used with the self-signed parameter to
                    specify the common name. The common name represents thequalified
                    domain name of the current array. For example, for https://purearray.example.com,
                    the commonname must be purearray.example.com or *.example.com
                    for a wildcard certificate. It can also be themanagement IP address
                    of the array or the short name of the current array. It can''t
                    have more than 64characters.Optional.', type: string}
                country: {description: Used with the self-signed parameter to specify
                    the country name. The country name represents the two-letter ISO
                    code for the country where your organization is located.Optional.,
                  type: string}
                days: {description: Used with the self-signed parameter to specify
                    the number of valid days for the self-signed certificatebeing
                    generated.Optional., type: integer}
                email: {description: Used with the self-signed parameter to specify
                    the email address used to contact your organization.Optional.,
                  type: string}
                intermediate_certificate string: {description: 'Used with the certificate
                    parameter to specify the intermediate certificate to import.Optional.keystringUsed
                    with the certificate parameter to specify the private key to import.Optional.key-sizeintUsed
                    with the new_key parameter to specify the key size in bits. Valid
                    values are 512, 1024, 2048 (default)or 4096. A key size smaller
                    than 2048 is considered insecure.Optional.localitystringUsed with
                    the self-signed parameter to specify the city where your organization
                    is located.Optional.new_keybooleanUsed with the self-signed parameter
                    to create a new key when creating the self-signed certificate.
                    If anew private key is not generated, the certificate uses the
                    existing private key.Optional.organizationstringUsed with the
                    self-signed parameter to specify the full and exact legal name
                    of your organization. Theorganization name should not be abbreviated
                    and should include suffixes such as Inc, Corp, or LLC. Forexample,''Pure
                    Storage, Inc.''Optional.organizational_unitstringUsed with the
                    self-signed parameter to specify the department within your organization
                    that you want toappear in the certificate.Optional.passphrasestringUsed
                    with the key parameter to decrypt the private key.Optional.self_signedbooleanGenerates
                    a self-signed certificate.self_signed or certificate must be set.Optional.statestringUsed
                    with the self-signed parameter to specify the state or province
                    where your organization is located.Optional.', type: string}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SSL]
    put:
      description: Creates a self-signed certificate or imports a certificate signed
        by a certificate authority (CA).Creating a self-signed certificate or importing
        a certificate replaces the existing certificate. Either the certificate or
        self-signed parameter must bespecified.
      operationId: put/1.13/cert/{certificate}
      parameters:
      - in: path
        name: certificate
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ca_certificate: {description: Used with the certificate parameter
                    to specify the CA certificate to import.Optional., type: string}
                certificate: {description: Imports a certificate signed by a certificate
                    authority.Optional., type: string}
                common_name: {description: 'Used with the self-signed parameter to
                    specify the common name. The common name represents thequalified
                    domain name of the current array. For example, for https://purearray.example.com,
                    the commonname must be purearray.example.com or *.example.com
                    for a wildcard certificate. It can also be themanagement IP address
                    of the array or the short name of the current array. It can''t
                    have more than 64characters.Optional.', type: string}
                country: {description: Used with the self-signed parameter to specify
                    the country name. The country name represents the two-letter ISO
                    code for the country where your organization is located.Optional.,
                  type: string}
                days: {description: self-signedparameter to specify the number of
                    valid days for the self-signed certificateUsed with thebeing generated.Optional.,
                  type: integer}
                email: {description: Used with the self-signed parameter to specify
                    the email address used to contact your organization.Optional.,
                  type: string}
                intermediate_certificate string: {description: 'Used with the certificate
                    parameter to specify the intermediate certificate to import.Optional.keystringUsed
                    with the certificate parameter to specify the private key to import.Optional.key-sizeintUsed
                    with the new_key parameter to specify the key size in bits. Valid
                    values are 512, 1024, 2048 (default)or 4096. A key size smaller
                    than 2048 is considered insecure.Optional.localitystringUsed with
                    the self-signed parameter to specify the city where your organization
                    is located.Optional.new_keybooleanUsed with the self-signed parameter
                    to create a new key when creating the self-signed certificate.
                    If anew private key is not generated, the certificate uses the
                    existing private key.Optional.organizationstringUsed with the
                    self-signed parameter to specify the full and exact legal name
                    of your organization. Theorganization name should not be abbreviated
                    and should include suffixes such as Inc, Corp, or LLC. Forexample,''Pure
                    Storage, Inc.''Optional.organizational_unitstringUsed with the
                    self-signed parameter to specify the department within your organization
                    that you want toappear in the certificate.Optional.passphrasestringUsed
                    with the key parameter to decrypt the private key.Optional.self_signedbooleanGenerates
                    a self-signed certificate.self_signed or certificate must be set.Optional.statestringUsed
                    with the self-signed parameter to specify the state or province
                    where your organization is located.Optional.', type: string}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SSL]
  /1.13/directoryservice:
    get:
      description: Lists current base configuration information for the directory
        service.
      operationId: get/1.13/directoryservice
      parameters:
      - description: If set to true, returns information about the currently configured
          CA certificate data.Optional.
        in: query
        name: certificate
        schema: {type: boolean}
      - description: If set to true, returns information about the group configuration.Optional.
        in: query
        name: groups
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_directoryserviceExamples'}
          description: ''
      tags: [Users]
    put:
      description: Modifies and tests the directory service configuration.At least
        one parameter must be specified.
      operationId: put/1.13/directoryservice
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: 'When set to test, tests the current directory
                    service configuration; verifies that the URIs can be resolved
                    andthat Purity can bind and query the tree using the bind user
                    credentials. The call also verifies that it can find allthe configured
                    groups to ensure the Common Names and group base are correctly
                    configured.Optional.', type: string}
                array_admin_group: {description: Sets the common Name (CN) of the
                    directory service group containing administrators with full privileges
                    whenmanaging the FlashArray. The name should be just the Common
                    Name of the group without the CN=specifier. Common Names should
                    not exceed 64 characters in length.Optional., type: string}
                auto_fetch: {description: 'When used with certificate, set the value
                    to true to download and confirm the server certificate.Optional.',
                  type: boolean}
                base_dn: {description: Sets the base of the Distinguished Name (DN)
                    of the directory service groups. The base should consist of onlyDomain
                    Components (DCs). The base_dn will populate with a default value
                    when a URI is entered by parsingdomain components from the URI.
                    The base DN should specify DC= for each domain component and multipleDCs
                    should be separated by commas.Optional., type: string}
                bind_password: {description: Sets the password of the bind_user user
                    name account.Optional., type: string}
                bind_user: {description: 'Sets the user name that can be used to bind
                    to and query the directory.For Active Directory, enter the username
                    - often referred to as sAMAccountName or User Logon Name - ofthe
                    account that is used to perform directory lookups.For OpenLDAP,
                    enter the full DN of the user.Optional.', type: string}
                certificate: {description: 'Certificate string in PEM format, including
                    the "-----BEGIN CERTIFICATE-----" and"-----END CERTIFICATE-----"
                    lines.Optional.', type: string}
                check_peer: {description: Enables (true) or disables (false) server
                    authenticity enforcement with the configured CA certificate.Optional.,
                  type: boolean}
                enabled: {description: Enables (true) or disables (false) directory
                    service support.Optional., type: boolean}
                group_base: {description: Specifies where the configured groups are
                    located in the directory tree. This field consists of OrganizationalUnits
                    (OUs) that combine with the base DN attribute and the configured
                    group CNs to complete the fullDistinguished Name of the groups.
                    The group base should specify OU= for each OU and multiple OUs
                    shouldbe separated by commas. The order of OUs is important and
                    should get larger in scope from left to right. EachOU should not
                    exceed 64 characters in length.Optional., type: string}
                readonly_group: {description: Sets the common Name (CN) of the configured
                    directory service group containing users with read-onlyprivileges
                    on the FlashArray. This name should be just the Common Name of
                    the group without the CN=specifier. Common Names should not exceed
                    64 characters in length.Optional., type: string}
                storage_admin_group string: {description: Sets the common Name (CN)
                    of the configured directory service group containing administrators
                    with storage-related privileges on the FlashArray. This name should
                    be just the Common Name of the group without theCN= specifier.
                    Common Names should not exceed 64 characters in length.Optional.,
                  type: string}
                trust: {description: 'When used with certificate, set the value to
                    true to skip certificate chain trust verification.Optional.',
                  type: boolean}
                uri:
                  description: A list of up to 30 URIs of the directory servers. Each
                    URI must include the scheme ldap:// or ldaps:// (forLDAP over
                    SSL), a hostname, and a domain name or IP address. For example,
                    ldap://ad.company.comconfigures the directory service with the
                    hostname "ad" in the domain "company.com" while specifying theunencrypted
                    LDAP protocol.If specifying a domain name, it should be resolvable
                    by the configured DNS servers. If specifying an IPaddress, for
                    IPv4, specify the IP address in the form ddd.ddd.ddd.ddd, where
                    ddd is a number rangingfrom 0 to 255 representing a group of 8
                    bits. For IPv6, specify the IP address in the form[xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx],
                    where xxxx is a hexadecimal number representing agroup of 16 bits.
                    Enclose the entire address in square brackets ([]). Consecutive
                    fields of zeros can beshortened by replacing the zeros with a
                    double colon (::).If the scheme of the URIs is ldaps://, SSL is
                    enabled. SSL is either enabled or disabled globally, so thescheme
                    of all supplied URIs must be the same. They must also all have
                    the same domain.If base DN is not configured and a URI is provided,
                    the base DN will automatically default to the domaincomponents
                    of the URIs.Optionally specify a port. If a port number is specified,
                    append it to the end of the address. Default ports are389 for
                    ldap, and 636 for ldaps. Non-standard ports can be specified in
                    the URI if they are in use.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_directoryserviceExamples'}
          description: ''
      tags: [Users]
  /1.13/dns:
    get:
      description: Lists DNS attributes for the array administrative network.
      operationId: get/1.13/dns
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_dnsExamples'}
          description: ''
      tags: [Network]
    put:
      description: Sets the DNS attributes for the array administrative network.At
        least one parameter must be specified.
      operationId: put/1.13/dns
      requestBody:
        content:
          application/json:
            schema:
              properties:
                domain: {description: Domain suffix to be appended by the array when
                    performing DNS lookups.Optional., type: string}
                nameservers:
                  description: A list of up to three DNS server IP addresses that
                    replace the current list of name servers. For IPv4, specify theIP
                    address in the form ddd.ddd.ddd.ddd, where ddd is a number ranging
                    from 0 to 255 representing a groupof 8 bits. For IPv6, specify
                    the IP address in the form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx,where
                    xxxx is a hexadecimal number representing a group of 16 bits.
                    When specifying an IPv6 address,consecutive fields of zeros can
                    be shortened by replacing the zeros with a double colon (::).Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_dnsExamples'}
          description: ''
      tags: [Network]
  /1.13/drive:
    get:
      description: Lists flash modules, NVRAM modules, and their attributes.
      operationId: get/1.13/drive
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_driveExamples'}
          description: ''
      tags: [Hardware]
  /1.13/drive/{drive}:
    get:
      description: Lists the attributes for the specified flash module or NVRAM module.
      operationId: get/1.13/drive/{drive}
      parameters:
      - in: path
        name: drive
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_drive_{drive}Examples'}
          description: ''
      tags: [Hardware]
  /1.13/hardware:
    get:
      description: Lists array hardware component information.Returns information
        about array hardware components that are capable of reporting their status.
        The display is primarily useful for diagnosing hardware-related problems.
      operationId: get/1.13/hardware
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_hardwareExamples'}
          description: ''
      tags: [Hardware]
  /1.13/hardware/{component}:
    get:
      description: Lists the attributes for the specified hardware component.
      operationId: get/1.13/hardware/{component}
      parameters:
      - in: path
        name: component
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_hardware_{component}Examples'}
          description: ''
      tags: [Hardware]
    put:
      description: Controls the visual identification of the specified chassis, controllers,
        flash module bays, NVRAM module bays, and storage shelves.At least one parameter
        must be specified.
      operationId: put/1.13/hardware/{component}
      parameters:
      - in: path
        name: component
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                identify: {description: 'Turns the LED light on or off to identify
                    the specified component. Valid for chassis, controllers, flash
                    modulebays, NVRAM module bays, and storage shelves. Set identify
                    to "on" to turn on the LED and identify thespecified component.
                    Set identify to "off" to turn off the LED.Optional.', type: string}
                index: {description: Displays the specified number on the identifying
                    component.Optional., type: string}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_hardware_{component}Examples'}
          description: ''
      tags: [Hardware]
  /1.13/hgroup:
    get:
      description: Lists or monitors all host groups.
      operationId: get/1.13/hgroup
      parameters:
      - description: If set to monitor, displays host group I/O performance information
          for all host groups.Optional.
        in: query
        name: action
        schema: {type: string}
      - description: Displays all volumes associated with host groups, and the LUNs
          used by the associated hosts to address them.Optional.
        in: query
        name: connect
        schema: {type: boolean}
      - description: Displays specified host groups. Enter multiple host group names
          in comma-separated format. Host groupnames can include asterisk (*) wildcard
          characters to represent zero or more characters.Optional.
        in: query
        name: names
        schema:
          items: {type: object}
          type: array
      - description: Displays (true) all protected host groups and their associated
          protection groups.Optional.
        in: query
        name: protect
        schema: {type: boolean}
      - description: Displays size and space consumption information for each volume
          associated with each specified host group.Optional.
        in: query
        name: space
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_hgroupExamples'}
          description: ''
      tags: [Host]
  /1.13/hgroup/{hgroup}:
    delete:
      description: Deletes the specified host group. You must disconnect all volumes
        and remove all hosts from the host group before deleting the host group.
      operationId: delete/1.13/hgroup/{hgroup}
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_hgroup_{hgroup}Examples'}
          description: ''
      tags: [Host]
    get:
      description: Lists or monitors a single host group.
      operationId: get/1.13/hgroup/{hgroup}
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      - description: If set to monitor, displays host group I/O performance information
          for the specified host group.Optional.
        in: query
        name: action
        schema: {type: string}
      - description: Displays (true) the names of all protection groups associated
          with the specified host group. If the host group isnot protected, returns
          an empty response.Optional.
        in: query
        name: protect
        schema: {type: boolean}
      - description: Displays size and space consumption information for each volume
          associated with the specified host group.Optional.
        in: query
        name: space
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_hgroup_{hgroup}Examples'}
          description: ''
      tags: [Host]
    post:
      description: Creates a host group with the specified name.
      operationId: post/1.13/hgroup/{hgroup}
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                hostlist:
                  description: List of member hosts.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_hgroup_{hgroup}Examples'}
          description: ''
      tags: [Host]
    put:
      description: Adds, removes, or modifies host members of the host group.At least
        one parameter must be specified.
      operationId: put/1.13/hgroup/{hgroup}
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                addhostlist:
                  description: Adds a list of hosts to the existing list.Optional.
                  items: {type: object}
                  type: array
                hostlist:
                  description: Replaces the list of member hosts.Optional.
                  items: {type: object}
                  type: array
                name: {description: Changes the name of the host group to the specified
                    name.Optional., type: string}
                remhostlist:
                  description: Removes the list of hosts from the existing list.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_hgroup_{hgroup}Examples'}
          description: ''
      tags: [Host]
  /1.13/hgroup/{hgroup}/pgroup/{pgroup}:
    delete:
      description: Removes a host group member from a protection group.
      operationId: delete/1.13/hgroup/{hgroup}/pgroup/{pgroup}
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Host]
    post:
      description: Adds a host group to a protection group.You can only add members
        of the same object type to a protection group. For example, you cannot add
        hosts or host groups to a protection group thatcontains volumes.
      operationId: post/1.13/hgroup/{hgroup}/pgroup/{pgroup}
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties: {}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Host]
  /1.13/hgroup/{hgroup}/volume:
    get:
      description: Lists volumes associated with the specified host groups and the
        LUNs used to address them.
      operationId: get/1.13/hgroup/{hgroup}/volume
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_hgroup_{hgroup}_volumeExamples'}
          description: ''
      tags: [Host]
  /1.13/hgroup/{hgroup}/volume/{volume}:
    delete:
      description: Breaks the connections between all hosts associated with the host
        group and the specified volume.
      operationId: delete/1.13/hgroup/{hgroup}/volume/{volume}
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      - in: path
        name: volume
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_hgroup_{hgroup}_volume_{volume}Examples'}
          description: ''
      tags: [Host]
    post:
      description: Connects a volume to all hosts in the specified host group.If the
        LUN is not specified, when the volume is connected to the host group, Purity
        assigns the same LUN to each connection. All hosts in the group use thisLUN
        to communicate with the volume.
      operationId: post/1.13/hgroup/{hgroup}/volume/{volume}
      parameters:
      - in: path
        name: hgroup
        required: true
        schema: {type: string}
      - in: path
        name: volume
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                lun: {description: Assigns the specified LUN to each connection.Optional.,
                  type: integer}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_hgroup_{hgroup}_volume_{volume}Examples'}
          description: ''
      tags: [Host]
  /1.13/host:
    get:
      description: Lists all hosts on the array.
      operationId: get/1.13/host
      parameters:
      - description: If set to monitor, displays host-wide I/O performance information
          in real time. Time is displayed in GreenwichMean Time (GMT).Optional.
        in: query
        name: action
        schema: {type: string}
      - description: Displays all visible attributes of the specified hosts, including
          associated worldwide names, host groups,connected volumes and the LUNs used
          to address them, and array port worldwide names through which thevolumes
          are visible.Optional.
        in: query
        name: all
        schema: {type: boolean}
      - description: Displays host and target user names and indicates whether host
          and target passwords have been set.Optional.
        in: query
        name: chap
        schema: {type: boolean}
      - description: Displays all host-volume connections, either private or shared,
          and the LUNs used by the hosts to address thevolumes.Optional.
        in: query
        name: connect
        schema: {type: boolean}
      - description: Displays specified hosts. Enter multiple host names in comma-separated
          format. Host names can includeasterisk (*) wildcard characters to represent
          zero or more characters.Optional.
        in: query
        name: names
        schema:
          items: {type: object}
          type: array
      - description: Displays the personality setting associated with the specified
          hosts.Optional.
        in: query
        name: personality
        schema: {type: boolean}
      - description: Used with the connect parameter to display (true) private host-volume
          connections.Optional.
        in: query
        name: private
        schema: {type: boolean}
      - description: Displays all protected hosts and their associated protection
          groups.Optional.
        in: query
        name: protect
        schema: {type: boolean}
      - description: Used with the connect parameter to display (true) shared host-volume
          connections.Optional.
        in: query
        name: shared
        schema: {type: boolean}
      - description: Displays information about provisioned (virtual) size and physical
          storage consumption for each volumeconnected to the specified hosts.Optional.
        in: query
        name: space
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_hostExamples'}
          description: ''
      tags: [Hosts]
  /1.13/host/{host}:
    delete:
      description: Removes the specified host.Hosts cannot be deleted while they have
        private connections to volumes or while they are associated with host groups.
      operationId: delete/1.13/host/{host}
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_host_{host}Examples'}
          description: ''
      tags: [Hosts]
    get:
      description: Lists the attributes for the specified host.
      operationId: get/1.13/host/{host}
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      - description: If set to monitor, displays host-wide I/O performance information
          in real time. Time is displayed in GreenwichMean Time (GMT).Optional.
        in: query
        name: action
        schema: {type: string}
      - description: Displays all visible attributes of the specified host. Display
          includes associated worldwide names, host groups,connected volumes and the
          LUNs used to address them, array port worldwide names through which thevolumes
          are visible.Optional.
        in: query
        name: all
        schema: {type: boolean}
      - description: Displays host and target usernames and indicates whether host
          and target passwords have been set.Optional.
        in: query
        name: chap
        schema: {type: boolean}
      - description: Displays the personality setting associated with the specified
          host.Optional.
        in: query
        name: personality
        schema: {type: boolean}
      - description: Displays the names of all protection groups associated with the
          specified host. If the host is not protected,returns an empty response.Optional.
        in: query
        name: protect
        schema: {type: boolean}
      - description: Displays information about provisioned (virtual) size and physical
          storage consumption for each volumeconnected to the specified host.Optional.
        in: query
        name: space
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_host_{host}Examples'}
          description: ''
      tags: [Hosts]
    post:
      description: Creates a host with the specified name.
      operationId: post/1.13/host/{host}
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                iqnlist:
                  description: Sets the list of iSCSI qualified names (IQNs) for the
                    new host.Optional.
                  items: {type: object}
                  type: array
                wwnlist:
                  description: Sets the list of Fibre Channel worldwide names (WWNs)
                    for the new host.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_host_{host}Examples'}
          description: ''
      tags: [Hosts]
    put:
      description: Modifies the attributes for the host.At least one parameter must
        be specified.
      operationId: put/1.13/host/{host}
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                addiqnlist:
                  description: Adds the list of iSCSI qualified names (IQNs) to the
                    specified host.Optional.
                  items: {type: object}
                  type: array
                addwwnlist:
                  description: Adds the list of Fibre Channel worldwide names (WWNs)
                    to the specified host.Optional.
                  items: {type: object}
                  type: array
                host_password: {description: Sets the host password for CHAP authentication.Optional.,
                  type: string}
                host_user: {description: Sets the host user name for CHAP authentication.Optional.,
                  type: string}
                iqnlist:
                  description: Assigns a list of iSCSI qualified names (IQNs) to the
                    specified host.Optional.
                  items: {type: object}
                  type: array
                name: {description: Changes the name of the host to the specified
                    name.Optional., type: string}
                personality: {description: 'Determines the way in which the host personality
                    tunes the protocol used between the array and the initiator. Ifthe
                    host is running the HP-UX operating system, set the host personality
                    to ''hpux''.Optional.', type: string}
                remiqnlist:
                  description: Removes the list of iSCSI qualified names (IQNs) from
                    the specified host.Optional.
                  items: {type: object}
                  type: array
                remwwnlist:
                  description: Removes the list of Fibre Channel worldwide names (WWNs)
                    from the specified host.Optional.
                  items: {type: object}
                  type: array
                target_password: {description: Sets the target password for CHAP authentication.Optional.,
                  type: string}
                target_user: {description: Sets the target user name for CHAP authentication.Optional.,
                  type: string}
                wwnlist:
                  description: Assigns a list of Fibre Channel worldwide names (WWNs)
                    to the specified host.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_host_{host}Examples'}
          description: ''
      tags: [Hosts]
  /1.13/host/{host}/pgroup/{pgroup}:
    delete:
      description: Removes a host member from a protection group.
      operationId: delete/1.13/host/{host}/pgroup/{pgroup}
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Hosts]
    post:
      description: Adds a host to a protection group.You can only add members of the
        same object type to a protection group. For example, you cannot add hosts
        or host groups to a protection group thatcontains volumes.
      operationId: post/1.13/host/{host}/pgroup/{pgroup}
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties: {}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Hosts]
  /1.13/host/{host}/volume:
    get:
      description: Lists volumes associated with the specified host and the LUNs used
        to address them.
      operationId: get/1.13/host/{host}/volume
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      - description: Restricts (true) the display list to volumes with private connections.Optional.
        in: query
        name: private
        schema: {type: boolean}
      - description: Restricts (true) the display list to volumes with shared connections.Optional.
        in: query
        name: shared
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_host_{host}_volumeExamples'}
          description: ''
      tags: [Hosts]
  /1.13/host/{host}/volume/{volume}:
    delete:
      description: Breaks the connection between a host and volume.
      operationId: delete/1.13/host/{host}/volume/{volume}
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      - in: path
        name: volume
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_host_{host}_volume_{volume}Examples'}
          description: ''
      tags: [Hosts]
    post:
      description: Connects a volume to the host.
      operationId: post/1.13/host/{host}/volume/{volume}
      parameters:
      - in: path
        name: host
        required: true
        schema: {type: string}
      - in: path
        name: volume
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                lun: {description: Assigns the same LUN to each connection. The connection
                    fails for any host for which the specified LUN isalready in use.Optional.,
                  type: integer}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_host_{host}_volume_{volume}Examples'}
          description: ''
      tags: [Hosts]
  /1.13/message:
    get:
      description: Lists alert events, audit records, and user login sessions.
      operationId: get/1.13/message
      parameters:
      - description: Lists audit records instead of alerts (default). May not be used
          with login or open.Optional.
        in: query
        name: audit
        schema: {type: boolean}
      - description: Lists flagged messages only. The array automatically flags warnings
          and critical alerts.Optional.
        in: query
        name: flagged
        schema: {type: boolean}
      - description: Lists user session logs instead of alerts (default). May not
          be used with audit or open.Optional.
        in: query
        name: login
        schema: {type: boolean}
      - description: Lists open messages. May not be used with audit or login.Optional.
        in: query
        name: open
        schema: {type: boolean}
      - description: Lists recent messages. An audit record is considered recent if
          it relates to a command issued within the past 24hours. An alert is considered
          recent if the situation that triggered it is unresolved, or has only been
          resolvedwithin the past 24 hours. A user session log event is considered
          recent if the login, logout, or authenticationevent occurred within the
          past 24 hours.Optional.
        in: query
        name: recent
        schema: {type: boolean}
      - description: When audit is set to true, user can be used to list audit records
          for a specific user. When login is set totrue, user can be used to list
          user session logs for a specific user.Optional.
        in: query
        name: user
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_messageExamples'}
          description: ''
      tags: [Alerts]
  /1.13/message/{id}:
    put:
      description: Flags or unflags a message.
      operationId: put/1.13/message/{id}
      parameters:
      - in: path
        name: id
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                flagged: {description: 'Flags (true) or unflags (false) a message.
                    If set to true, flags the message with the specified ID. If set
                    tofalse, unflags the message.', type: boolean}
              required: [flagged]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Alerts]
  /1.13/network:
    get:
      description: Lists array administrative network interfaces and their statuses
        (enabled or disabled) and attributes.
      operationId: get/1.13/network
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_networkExamples'}
          description: ''
      tags: [Network]
  /1.13/network/vif/{vlan_interface}:
    post:
      description: Creates a VLAN interface.
      operationId: post/1.13/network/vif/{vlan_interface}
      parameters:
      - in: path
        name: vlan_interface
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                address: {description: 'Sets the IP address to be associated with
                    the specified interface. The IP address must match the subnet
                    prefix.For IPv4, enter the address in CIDR notation ddd.ddd.ddd.ddd/dd.
                    For example, 10.20.20.210/24.Alternatively, specify the address
                    ddd.ddd.ddd.ddd with a netmask. The netmask is set through thenetmask
                    parameter.For IPv6, enter the address and prefix length in the
                    formxxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx. For example,2001:0db8:85a3::ae26:8a2e:0370:7334/64.
                    Consecutive fields of zeros can be shortened by replacingthe zeros
                    with a double colon (::). Alternatively, specify the addressxxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
                    with a prefix length. The prefix length is set through thenetmask
                    parameter.Optional.', type: string}
                subnet: {description: Sets the subnet associated with the specified
                    interface., type: string}
              required: [subnet]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_network_vif_{vlan_interface}Examples'}
          description: ''
      tags: [Network]
  /1.13/network/{network_component}:
    get:
      description: Lists the attributes for the specified network component.
      operationId: get/1.13/network/{network_component}
      parameters:
      - in: path
        name: network_component
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_network_{network_component}Examples'}
          description: ''
      tags: [Network]
    put:
      description: Performs network interface actions and sets the administrative
        network component attributes.At least one parameter must be specified.
      operationId: put/1.13/network/{network_component}
      parameters:
      - in: path
        name: network_component
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                address: {description: Sets the IP address to be associated with the
                    specified Ethernet interface., type: string}
                addsubinterfacelist:
                  description: For IPv4, enter the address in CIDR notation ddd.ddd.ddd.ddd/dd.
                    For example, 10.20.20.210/24.Alternatively, specify the address
                    ddd.ddd.ddd.ddd with a netmask. The netmask is set through thenetmask
                    parameter.For IPv6, enter the address and prefix length in the
                    formxxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx. For example,2001:0db8:85a3::ae26:8a2e:0370:7334/64.
                    Consecutive fields of zeros can be shortened by replacingthe zeros
                    with a double colon (::). Alternatively, specify the addressxxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
                    with a prefix length. The prefix length is set through thenetmask
                    parameter.Required if the netmask parameter is set.Add subinterfaces
                    to the existing list. May only be used on network bond subinterfaces.Optional.
                  items: {type: object}
                  type: array
                enabled: {description: Enables (true) or disables (false) communication
                    between the specified Ethernet interface and theadministrative
                    network. Do not disable the interface through which the administrative
                    session is beingconducted.Optional., type: boolean}
                gateway: {description: 'Sets the IP address of the gateway through
                    which the specified interface is to communicate with the network.For
                    IPv4, specify the gateway IP address in the form ddd.ddd.ddd.ddd.
                    For IPv6, specify the gateway IPaddress in the form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx.
                    When specifying an IPv6address, consecutive fields of zeros can
                    be shortened by replacing the zeros with a double colon (::).Optional.',
                  type: string}
                mtu: {description: Maximum message transfer unit (packet) size for
                    the interface in bytes. Valid values are integers between 1280and
                    9216 (inclusive). The default value is 1500.Optional., type: integer}
                netmask: {description: 'Used with the address parameter to define
                    the range of IP addresses that make up a group of IP addresseson
                    the same network. For IPv4, if the address is not entered in CIDR
                    notation, enter the subnet mask in theform ddd.ddd.ddd.ddd. For
                    example, 255.255.255.0. For IPv6, if the address entered does
                    not include aprefix length, specify the prefix length. For example,
                    64.Optional.', type: string}
                remsubinterfacelist:
                  description: Removes the list of subinterfaces from the existing
                    list. May only be used on network bond subinterfaces.Optional.
                  items: {type: object}
                  type: array
                subnet: {description: Associates a subnet with the specified VLAN
                    interface.Optional., type: string}
                subnterfacelist:
                  description: Replaces the existing subinterface list. May only be
                    used on network bond subinterfaces.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_network_{network_component}Examples'}
          description: ''
      tags: [Network]
  /1.13/network/{vlan_interface}:
    delete:
      description: Deletes a VLAN interface.
      operationId: delete/1.13/network/{vlan_interface}
      parameters:
      - in: path
        name: vlan_interface
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_network_{vlan_interface}Examples'}
          description: ''
      tags: [Network]
  /1.13/pgroup:
    get:
      description: Lists protection groups and protection group snapshots and their
        attributes.
      operationId: get/1.13/pgroup
      parameters:
      - description: Displays specified protection groups. Enter multiple protection
          group names in comma-separated format.Protection group names can include
          asterisk (*) wildcard characters to represent zero or more characters.Optional.
        in: query
        name: names
        schema:
          items: {type: object}
          type: array
      - description: Includes (true) destroyed protection groups that are in the eradication
          pending state. Time remaining isdisplayed in seconds. The pending option
          can also be used with the schedule, retention, space, or snapoptions to
          include a list of pending protection groups or snapshots.Optional.
        in: query
        name: pending
        schema: {type: boolean}
      - description: Lists (true) destroyed protection groups that are in the eradication
          pending state. Time remaining is displayedin seconds. The pending option
          can also be used with the schedule, retention, space, or snap optionsto
          include a list of pending protection groups or snapshots.Optional.
        in: query
        name: pending_only
        schema: {type: boolean}
      - description: Displays (true) the source/target retention policy.Optional.
        in: query
        name: retention
        schema: {type: boolean}
      - description: Displays (true) the snapshot/replication schedule.Optional.
        in: query
        name: schedule
        schema: {type: boolean}
      - description: Lists all snapshots (true). Can be used with the space parameter
          to list space consumption for all snapshots.Optional.
        in: query
        name: snap
        schema: {type: boolean}
      - description: Lists (true) protection groups and snapshots created on this
          array. The source option can be used with theschedule, retention, space,
          or snap options.Optional.
        in: query
        name: source
        schema: {type: boolean}
      - description: Displays (true) size and space consumption information for each
          volume associated with each specifiedprotection group.Optional.
        in: query
        name: space
        schema: {type: boolean}
      - description: Lists (true) protection groups and snapshots replicated to this
          array. The target option can be used with theschedule, retention, space,
          or snap options.Optional.
        in: query
        name: target
        schema: {type: boolean}
      - description: Displays (true) the total space consumption for all protection
          groups. Must be used with the space parameter.Optional.
        in: query
        name: total
        schema: {type: boolean}
      - description: Used with the snap parameter to display (true) replication data
          transfer statistics, including data transfer starttime, data transfer end
          time, data transfer progress, and amount of logical/physical data transferred.Optional.
        in: query
        name: transfer
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_pgroupExamples'}
          description: ''
      tags: [Protection]
    post:
      description: Creates snapshots of one or more protection groups.
      operationId: post/1.13/pgroup
      requestBody:
        content:
          application/json:
            schema:
              properties:
                apply_retention: {description: Applies the retention schedule settings
                    of the protection group to the snapshot.Optional., type: boolean}
                replicate: {description: 'Queues this snapshot for replication to
                    all allowed target arrays. Purity will begin replicating data
                    to eachallowed target when all earlier replication sessions for
                    the same protection group have been completed to thattarget, excluding
                    those started with replicate_now. May not be used with replicate_now.Optional.',
                  type: boolean}
                replicate_now: {description: Replicates this snapshot immediately
                    to all allowed target arrays. May not be used with replicate.Optional.,
                  type: boolean}
                snap: {description: Must be set to true to signify that a snapshot
                    is being created., type: boolean}
                source:
                  description: Generates a snapshot for each of the protection groups
                    specified.
                  items: {type: object}
                  type: array
                suffix: {description: Specifies a name suffix for the snapshot to
                    be created.Optional., type: string}
              required: [snap, source]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_pgroupExamples'}
          description: ''
      tags: [Protection]
  /1.13/pgroup/{pgroup}:
    delete:
      description: Destroys or eradicates the specified protection group or protection
        group snapshot.
      operationId: delete/1.13/pgroup/{pgroup}
      parameters:
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      - description: Eradicates the destroyed protection group or protection group
          snapshot. If destroying or eradicating aprotection group, its protection
          group snapshots are also destroyed or eradicated.Optional.
        in: query
        name: eradicate
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_pgroup_{pgroup}Examples'}
          description: ''
      tags: [Protection]
    get:
      description: Lists the attributes for the specified protection group or protection
        group snapshot.If listing protection group snapshot attributes, the snap parameter
        must be specified.
      operationId: get/1.13/pgroup/{pgroup}
      parameters:
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      - description: Includes (true) destroyed protection groups that are in the eradication
          pending state. Time remaining isdisplayed in seconds. The pending option
          can also be used with the schedule, retention, space, or snapoptions to
          include a list of pending protection groups or snapshots.Optional.
        in: query
        name: pending
        schema: {type: boolean}
      - description: Used with the snap parameter to list (true) destroyed protection
          group snapshots that are in the eradicationpending state. Time remaining
          is displayed in seconds.Optional.
        in: query
        name: pending_only
        schema: {type: boolean}
      - description: Displays (true) the source/target retention policy.Optional.
        in: query
        name: retention
        schema: {type: boolean}
      - description: Displays (true) the snapshot/replication schedule.Optional.
        in: query
        name: schedule
        schema: {type: boolean}
      - description: If listing the attributes for a specified protection group, set
          snap to true to list all snapshots within theprotection group. If listing
          the attributes for a specified protection group snapshot, always set snap
          to true.Can be used with the space parameter to list space consumption for
          all snapshots.Optional if listing attributes for a specified protection
          group. Required if listing attributes for a specifiedprotection group snapshot.
        in: query
        name: snap
        schema: {type: boolean}
      - description: Displays (true) size and space consumption information for each
          volume associated with each specifiedprotection group.Optional.
        in: query
        name: space
        schema: {type: boolean}
      - description: Used with the snap parameter to display (true) the total space
          consumption for all snapshots of this protectiongroup. Must be used with
          the space parameter.Optional.
        in: query
        name: total
        schema: {type: boolean}
      - description: Used with the snap parameter to display (true) replication data
          transfer statistics, including data transfer starttime, data transfer end
          time, data transfer progress, and amount of logical/physical data transferred.Optional.
        in: query
        name: transfer
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_pgroup_{pgroup}Examples'}
          description: ''
      tags: [Protection]
    post:
      description: Creates a protection group with the specified name or copies a
        protection group.When copying a protection group, the destination protection
        group is created if it did not exist previously.
      operationId: post/1.13/pgroup/{pgroup}
      parameters:
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                hgrouplist:
                  description: List of one or more host groups to be included in the
                    new protection group.Optional.
                  items: {type: object}
                  type: array
                hostlist:
                  description: List of one or more hosts to be included in the new
                    protection group.Optional.
                  items: {type: object}
                  type: array
                overwrite: {description: 'When copying a protection group, overwrite
                    (true) volumes in the destination protection group that have thesame
                    name as the volumes in the source protection group. Without the
                    overwrite=true parameter, the copycommand fails if any volume
                    name collisions are found. With the overwrite=true parameter,
                    both thesource and destination protection groups must contain
                    exactly the same volumes (volume names), otherwisethe entire copy
                    command fails.Optional.', type: boolean}
                source: {description: The source pgroup or pgroup snapshot to copy
                    from.Optional., type: string}
                targetlist:
                  description: List of one or more targets to be included in the new
                    protection group.Optional.
                  items: {type: object}
                  type: array
                vollist:
                  description: List of one or more volumes to be included in the new
                    protection group.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_pgroup_{pgroup}Examples'}
          description: ''
      tags: [Protection]
    put:
      description: Modifies a protection group, its snapshot/replication schedule
        or its retention policy.At least one parameter must be specified.
      operationId: put/1.13/pgroup/{pgroup}
      parameters:
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: 'If set to "recover", recovers a destroyed protection
                    group or snapshot.Optional.', type: string}
                addhgrouplist:
                  description: Adds a list of host groups to the existing list.Optional.
                  items: {type: object}
                  type: array
                addhostlist:
                  description: Adds a list of hosts to the existing list.Optional.
                  items: {type: object}
                  type: array
                addtargetlist:
                  description: Adds a list of target arrays to the existing list.Optional.
                  items: {type: object}
                  type: array
                addvollist:
                  description: Adds a list of volumes to the existing list.Optional.
                  items: {type: object}
                  type: array
                all_for: {description: Modifies the retention policy of the protection
                    group. Specifies the length of time to keep the snapshots on thesource
                    array before they are eradicated.Optional., type: integer}
                allowed: {description: Allows (true) or disallows (false) a protection
                    group from being replicated.Optional., type: boolean}
                days: {description: Modifies the retention policy of the protection
                    group. Specifies the number of days to keep the per_daysnapshots
                    beyond the all_for period before they are eradicated.Optional.,
                  type: integer}
                hgrouplist:
                  description: Replaces the list of member host groups.Optional.
                  items: {type: object}
                  type: array
                hostlist:
                  description: Replaces the list of member hosts.Optional.
                  items: {type: object}
                  type: array
                name: {description: Renames a protection group.Optional., type: string}
                per_day: {description: Modifies the retention policy of the protection
                    group. Specifies the number of per_day snapshots to keepbeyond
                    the all_for period.Optional., type: integer}
                remhgrouplist:
                  description: Removes a list of host groups from the existing list.Optional.
                  items: {type: object}
                  type: array
                remhostlist:
                  description: Removes a list of hosts from the existing list.Optional.
                  items: {type: object}
                  type: array
                remtargetlist:
                  description: Removes a list of target arrays from the existing list.Optional.
                  items: {type: object}
                  type: array
                remvollist:
                  description: Removes a list of volumes from the existing list.Optional.
                  items: {type: object}
                  type: array
                replicate_at: {description: 'Modifies the replication schedule of
                    the protection group. Specifies the preferred time, on the hour,
                    at which toreplicate the snapshots.Optional.', type: integer}
                replicate_blackout: {description: Modifies the replication schedule
                    of the protection group. Specifies the range of time at which
                    to suspendreplication. See the example for the dictionary format.Optional.,
                  type: object}
                replicate_enabled: {description: Used to enable (true) or disable
                    (false) the protection group replication schedule.Optional., type: boolean}
                replicate_frequency: {description: Modifies the replication schedule
                    of the protection group. Specifies the replication frequency.Optional.,
                  type: integer}
                snap_at: {description: 'Modifies the snapshot schedule of the protection
                    group. Specifies the preferred time, on the hour, at which togenerate
                    the snapshot.Optional.', type: integer}
                snap_enabled: {description: Used to enable (true) or disable (false)
                    the protection group snapshot schedule.Optional., type: boolean}
                snap_frequency: {description: Modifies the snapshot schedule of the
                    protection group. Specifies the snapshot frequency.Optional.,
                  type: integer}
                target_all_for: {description: Modifies the retention policy of the
                    protection group. Specifies the length of time to keep the replicatedsnapshots
                    on the target arrays.Optional., type: integer}
                target_days: {description: Modifies the retention policy of the protection
                    group. Specifies the number of days to keep the target_per_dayreplicated
                    snapshots beyond the target_all_for period before they are eradicated.Optional.,
                  type: integer}
                target_per_day: {description: Modifies the retention policy of the
                    protection group. Specifies the number of per_day replicated snapshots
                    tokeep beyond the target_all_for period.Optional., type: integer}
                targetlist:
                  description: Replaces the list of member target arrays.Optional.
                  items: {type: object}
                  type: array
                vollist:
                  description: Replaces the list of member volumes.Optional.
                  items: {type: object}
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_pgroup_{pgroup}Examples'}
          description: ''
      tags: [Protection]
  /1.13/port:
    get:
      description: Lists array ports and the worldwide names assigned to each port.
      operationId: get/1.13/port
      parameters:
      - description: Displays host worldwide names (both those discovered by Purity
          and those assigned by administrators) and thearray ports (targets) on which
          they are eligible to communicate.Optional.
        in: query
        name: initiators
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_portExamples'}
          description: ''
      tags: [Connection]
  /1.13/snmp:
    get:
      description: Lists designated SNMP managers and their communication and security
        attributes.
      operationId: get/1.13/snmp
      parameters:
      - description: SNMP v3 only. If set to true, displays the SNMP v3 engine ID
          generated by Purity for the array.Optional.
        in: query
        name: engine_id
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_snmpExamples'}
          description: ''
      tags: [SNMP]
  /1.13/snmp/{manager}:
    delete:
      description: Stops communication with the specified managers and deletes the
        SNMP manager object.
      operationId: delete/1.13/snmp/{manager}
      parameters:
      - in: path
        name: manager
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SNMP]
    get:
      description: Lists communication and security attributes for the specified SNMP
        manager.
      operationId: get/1.13/snmp/{manager}
      parameters:
      - in: path
        name: manager
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SNMP]
    post:
      description: Creates a Purity SNMP manager object that identifies a host (SNMP
        manager) and specifies the protocol attributes for communicating with it.Once
        a manager object is created, the transmission of SNMP traps is immediately
        enabled.
      operationId: post/1.13/snmp/{manager}
      parameters:
      - in: path
        name: manager
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                auth_passphrase: {description: 'SNMP v3 only. Passphrase used by Purity
                    to authenticate the array with the specified managers. The valuemust
                    be between 1 and 32 characters in length and from the set {[A-Z],
                    [a-z], [0-9], _ (underscore), and -(hyphen)}.', type: string}
                auth_protocol: {description: Required if the auth-protocol value is
                    set.SNMP v3 only. Hash algorithm used to validate the authentication
                    passphrase. Valid values are MD5 or SHA.Optional., type: string}
                community: {description: 'SNMP v2c only. Manager community ID under
                    which Purity is to communicate with the specified managers.The
                    value must be between 1 and 32 characters in length and from the
                    set {[A-Z], [a-z], [0-9], _ (underscore),and - (hyphen)}.', type: string}
                host: {description: 'Required if the version parameter is set to v2c.DNS
                    hostname or IP address of a computer that hosts an SNMP manager
                    to which Purity is to send trapmessages when it generates alerts.If
                    specifying an IP address, enter the IPv4 or IPv6 address.For IPv4,
                    specify the IP address in the form ddd.ddd.ddd.ddd, where ddd
                    is a number ranging from 0 to 255representing a group of 8 bits.
                    If a port number is also specified, append it to the end of the
                    address in theformat ddd.ddd.ddd.ddd:PORT, where PORT represents
                    the port number.For IPv6, specify the IP address in the form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx,
                    where xxxxis a hexadecimal number representing a group of 16 bits.
                    Consecutive fields of zeros can be shortened byreplacing the zeros
                    with a double colon (::). If a port number is also specified,
                    enclose the entire address insquare brackets ([]) and append the
                    port number to the end of the address. For example,[xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx]:PORT,
                    where PORT represents the port number.', type: string}
                privacy_passphrase: {description: SNMP v3 only. Passphrase used to
                    encrypt SNMP messages. The value must be between 8 and 63 non-spaceASCII
                    characters in length., type: string}
                privacy_protocol: {description: Required if the privacy-protocol value
                    is set.SNMP v3 only. Encryption protocol for SNMP messages. Valid
                    values are AES or DES.Optional., type: string}
                user: {description: 'SNMP v3 only. User ID recognized by the specified
                    SNMP managers which Purity is to use in communicationswith them.
                    The value must be between 1 and 32 characters in length and from
                    the set {[A-Z], [a-z], [0-9], _(underscore), and -(hyphen)}.Optional.',
                  type: string}
                version: {description: Version of the SNMP protocol to be used by
                    Purity in communications with the specified manager(s). Theversion
                    value is case sensitive. Valid values are v2c (default) and v3.Optional.,
                  type: string}
              required: [host]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SNMP]
    put:
      description: Changes name or the protocol attributes of the specified SNMP manager.At
        least one parameter must be specified.
      operationId: put/1.13/snmp/{manager}
      parameters:
      - in: path
        name: manager
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: Set the parameter to "test" to send a test trap
                    to the specified SNMP manager.Optional., type: string}
                auth_passphrase: {description: 'SNMP v3 only. Passphrase used by Purity
                    to authenticate the array with the specified managers. The valuemust
                    be between 1 and 32 characters in length and from the set {[A-Z],
                    [a-z], [0-9], _ (underscore), and -(hyphen)}.', type: string}
                auth_protocol: {description: Required if the auth-protocol value is
                    set.SNMP v3 only. Hash algorithm used to validate the authentication
                    passphrase. Valid values are MD5 or SHA.Optional., type: string}
                community: {description: 'SNMP v2c only. Manager community ID under
                    which Purity is to communicate with the specified managers.The
                    value must be between 1 and 32 characters in length and from the
                    set {[A-Z], [a-z], [0-9], _ (underscore),and - (hyphen)}.', type: string}
                host: {description: 'Required if the version parameter is set to v2c.DNS
                    hostname or IP address of a computer that hosts an SNMP manager
                    to which Purity is to send trapmessages when it generates alerts.If
                    specifying an IP address, enter the IPv4 or IPv6 address.For IPv4,
                    specify the IP address in the form ddd.ddd.ddd.ddd, where ddd
                    is a number ranging from 0 to 255representing a group of 8 bits.
                    If a port number is also specified, append it to the end of the
                    address in theformat ddd.ddd.ddd.ddd:PORT, where PORT represents
                    the port number.For IPv6, specify the IP address in the form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx,
                    where xxxxis a hexadecimal number representing a group of 16 bits.
                    Consecutive fields of zeros can be shortened byreplacing the zeros
                    with a double colon (::). If a port number is also specified,
                    enclose the entire address insquare brackets ([]) and append the
                    port number to the end of the address. For example,[xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx]:PORT,
                    where PORT represents the port number.Optional.', type: string}
                name: {description: 'New name of the SNMP manager. SNMP manager names
                    are used in Purity administrative commands, andhave no external
                    significance. Changing the name of the SNMP manager does not change
                    the protocol andsecurity attributes of the manager object.Optional.',
                  type: string}
                privacy_passphrase: {description: SNMP v3 only. Passphrase used to
                    encrypt SNMP messages. The value must be between 8 and 63 non-spaceASCII
                    characters in length., type: string}
                privacy_protocol: {description: Required if the privacy_protocol value
                    is set.SNMP v3 only. Encryption protocol for SNMP messages. Valid
                    values are AES or DES.Optional., type: string}
                user: {description: 'SNMP v3 only. User ID recognized by the specified
                    SNMP managers which Purity is to use in communicationswith them.
                    The value must be between 1 and 32 characters in length and from
                    the set {[A-Z], [a-z], [0-9], _(underscore), and -(hyphen)}.Optional.',
                  type: string}
                version: {description: Version of the SNMP protocol to be used by
                    Purity in communications with the specified manager(s). Theversion
                    value is case sensitive. Valid values are v2c (default) and v3.Optional.,
                  type: string}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [SNMP]
  /1.13/subnet:
    get:
      description: Lists subnets and their statuses (enabled or disabled) and attributes.
      operationId: get/1.13/subnet
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_subnetExamples'}
          description: ''
      tags: [Network]
  /1.13/subnet/{subnet}:
    delete:
      description: Deletes the specified subnet.
      operationId: delete/1.13/subnet/{subnet}
      parameters:
      - in: path
        name: subnet
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_subnet_{subnet}Examples'}
          description: ''
      tags: [Network]
    get:
      description: Lists the attributes of the specified subnet.
      operationId: get/1.13/subnet/{subnet}
      parameters:
      - in: path
        name: subnet
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_subnet_{subnet}Examples'}
          description: ''
      tags: [Network]
    post:
      description: Creates a subnet with the specified name.At least one parameter
        must be specified.
      operationId: post/1.13/subnet/{subnet}
      parameters:
      - in: path
        name: subnet
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                gateway: {description: 'Sets the IP address of the gateway through
                    which the specified subnet is to communicate with the network.
                    ForIPv4, specify the gateway IP address in the form ddd.ddd.ddd.ddd.
                    For IPv6, specify the gateway IPaddress in the form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx.
                    When specifying an IPv6address, consecutive fields of zeros can
                    be shortened by replacing the zeros with a double colon (::).Optional.',
                  type: string}
                mtu: {description: Maximum message transfer unit (packet) size for
                    the subnet in bytes. Valid values are integers between 1280and
                    9216 (inclusive). The default value is 1500.Optional., type: integer}
                prefix: {description: 'Sets the IP address to be associated with the
                    specified subnet. Specify the the subnet prefix and prefix length.For
                    IPv4, specify the subnet prefix in the form ddd.ddd.ddd.ddd/dd.
                    For IPv6, specify the subnet prefix inthe form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx.
                    When specifying an IPv6 address,consecutive fields of zeros can
                    be shortened by replacing the zeros with a double colon (::).Optional.',
                  type: string}
                vlan: {description: VLAN ID.Optional., type: integer}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_subnet_{subnet}Examples'}
          description: ''
      tags: [Network]
    put:
      description: Modifies the attributes of the subnet.At least one parameter must
        be specified.
      operationId: put/1.13/subnet/{subnet}
      parameters:
      - in: path
        name: subnet
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                enabled: {description: Enables or disables a subnet.Optional. Cannot
                    be used with any other parameters., type: boolean}
                gateway: {description: 'Sets the IP address of the gateway through
                    which the specified subnet is to communicate with the network.
                    ForIPv4, specify the gateway IP address in the form ddd.ddd.ddd.ddd.
                    For IPv6, specify the gateway IPaddress in the form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx.
                    When specifying an IPv6address, consecutive fields of zeros can
                    be shortened by replacing the zeros with a double colon (::).Optional.',
                  type: string}
                mtu: {description: Maximum message transfer unit (packet) size for
                    the subnet in bytes. Valid values are integers between 1280and
                    9216 (inclusive). The default value is 1500.Optional., type: integer}
                name: {description: Renames the specified subnet.Optional. Cannot
                    be used with any other parameters., type: string}
                prefix: {description: 'Sets the IP address to be associated with the
                    specified subnet. Specify the the subnet prefix and prefix length.For
                    IPv4, specify the subnet prefix in the form ddd.ddd.ddd.ddd/dd.
                    For IPv6, specify the subnet prefix inthe form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx.
                    When specifying an IPv6 address,consecutive fields of zeros can
                    be shortened by replacing the zeros with a double colon (::).Optional.',
                  type: string}
                vlan: {description: VLAN ID.Optional., type: integer}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_subnet_{subnet}Examples'}
          description: ''
      tags: [Network]
  /1.13/volume:
    get:
      description: Lists volumes and snapshots and their attributes.Created time is
        displayed in Greenwich Mean Time (GMT) and size is displayed in bytes.
      operationId: get/1.13/volume
      parameters:
      - description: If set to monitor, displays real-time or historical performance
          data. Time is displayed in Greenwich Mean Time(GMT).Optional.
        in: query
        name: action
        schema: {type: string}
      - description: Displays all host-volume connections, either private or shared,
          and the LUNs used by the hosts to address thevolumes.Optional.
        in: query
        name: connect
        schema: {type: boolean}
      - description: 'If the action parameter is set to monitor, set this parameter
          to display historical performance data at thespecified resolution.If the
          space parameter is set to true, set this parameter to display historical
          space data at the specifiedresolution.Valid historical values are: 1h, 3h,
          24h, 7d, 30d, 90d, and 1y.Include the names parameter to only display historical
          performance or space data for the specified volumes.Optional.'
        in: query
        name: historical
        schema: {type: string}
      - description: Displays specified volumes. Enter multiple volume names in comma-separated
          format. Volume names caninclude asterisk (*) wildcard characters to represent
          zero or more characters.Optional.
        in: query
        name: names
        schema:
          items: {type: object}
          type: array
      - description: Includes (true) destroyed volumes that are in the eradication
          pending state. Time remaining is displayed inseconds.Optional.
        in: query
        name: pending
        schema: {type: boolean}
      - description: Lists (true) destroyed volumes that are in the eradication pending
          state. Time remaining is displayed inseconds.Optional.
        in: query
        name: pending_only
        schema: {type: boolean}
      - description: Displays specified protection groups or protection group snapshots.
          Only valid if the snap parameter is set totrue. Enter multiple names in
          comma-separated format. Names can include asterisk (*) wildcard characters
          torepresent zero or more characters.Optional.
        in: query
        name: pgrouplist
        schema:
          items: {type: object}
          type: array
      - description: Used with the connect parameter to display (true) private host-volume
          connections.Optional.
        in: query
        name: private
        schema: {type: boolean}
      - description: Displays (true) all protected volumes and their associated protection
          groups.Optional.
        in: query
        name: protect
        schema: {type: boolean}
      - description: Used with the connect parameter to display (true) shared host-volume
          connections.Optional.
        in: query
        name: shared
        schema: {type: boolean}
      - description: Lists all snapshots (true).Optional.
        in: query
        name: snap
        schema: {type: boolean}
      - description: Lists size and space consumption attributes for each volume.Optional.
        in: query
        name: space
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_volumeExamples'}
          description: ''
      tags: [Volumes]
    post:
      description: Creates snapshots of one or more volumes.
      operationId: post/1.13/volume
      requestBody:
        content:
          application/json:
            schema:
              properties:
                snap: {description: Must be set to true to signify that a snapshot
                    is being created., type: boolean}
                source:
                  description: Names of one or more volumes to snapshot.
                  items: {type: object}
                  type: array
                suffix: {description: Specify a custom suffix that is added to the
                    snapshot name.Optional., type: string}
              required: [snap, source]
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_volumeExamples'}
          description: ''
      tags: [Volumes]
  /1.13/volume/{volume}:
    delete:
      description: Destroys or eradicates the specified volume or snapshot.
      operationId: delete/1.13/volume/{volume}
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      - description: If set to true, eradicates the specified volume or snapshot.
          If destroying or eradicating a volume, its snapshotsare also destroyed or
          eradicated.After destroying a volume or snapshot, you can eradicate it to
          immediately terminate the 24-hour eradicationperiod and begin storage reclamation.
          Once eradication has begun, the volume or snapshot can no longer berecovered.If
          set to false, destroys the specified volume or snapshot. The destroyed volume
          or snapshot undergoes a 24-hour eradication pending period during which
          time the volume or snapshot and its data can be fully recovered.After the
          24-hour pending period, Purity eradicates the destroyed volume or snapshot.Optional.
        in: query
        name: eradicate
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/delete_1.13_volume_{volume}Examples'}
          description: ''
      tags: [Volumes]
    get:
      description: Lists the attributes for the specified volume or snapshot.If listing
        volume snapshot attributes, the snap parameter must be specified.
      operationId: get/1.13/volume/{volume}
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      - description: If set to monitor, displays real-time or historical performance
          data. Time is displayed in Greenwich Mean Time(GMT).Optional.
        in: query
        name: action
        schema: {type: string}
      - description: 'If the action parameter is set to monitor, set this parameter
          to display historical performance data at thespecified resolution.If the
          space parameter is set to true, set this parameter to display historical
          space data at the specifiedresolution.Valid historical values are: 1h, 3h,
          24h, 7d, 30d, 90d, and 1y.Optional.'
        in: query
        name: historical
        schema: {type: string}
      - description: If the volume is in the eradication pending state, set pending
          to true to display the attributes for the destroyedvolume.Optional.
        in: query
        name: pending
        schema: {type: boolean}
      - description: Lists (true) destroyed volumes that are in the eradication pending
          state and their attributes.Optional.
        in: query
        name: pending_only
        schema: {type: boolean}
      - description: Displays specified protection groups or protection group snapshots.
          Only valid if snap is true. Only valid if thesnap parameter is set to true.
          Enter multiple names in comma-separated format. Names can include asterisk(*)
          wildcard characters to represent zero or more characters.Optional.
        in: query
        name: pgrouplist
        schema:
          items: {type: object}
          type: array
      - description: Displays (true) the names of all protection groups associated
          with the specified volume. If the volume is notprotected, returns an empty
          response.Optional.
        in: query
        name: protect
        schema: {type: boolean}
      - description: If listing the attributes for a specified volume, set snap to
          true to list all snapshots within the volume. If listingthe attributes for
          a specified volume snapshot, always set snap to true.Optional if listing
          attributes for a specified volume. Required if listing attributes for a
          specified volume snapshot.
        in: query
        name: snap
        schema: {type: boolean}
      - description: Lists size and space consumption attributes for the specified
          volume.Optional.
        in: query
        name: space
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_volume_{volume}Examples'}
          description: ''
      tags: [Volumes]
    post:
      description: Creates a volume or copies a volume or snapshot.Either the size
        or source parameter must be specified.
      operationId: post/1.13/volume/{volume}
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                overwrite: {description: 'When used with source, overwrites (true)
                    an existing volume.Optional.', type: boolean}
                size: {description: 'number or string Creates a volume with the specified
                    provisioned size.Enter the size as a number (bytes) or as a string
                    with a single character unit symbol. Valid unit symbols are K,M,
                    G, T, P, representing KiB, MiB, GiB, TiB, and PiB, respectively,
                    where "Ki" denotes 2^10, "Mi" denotes 2^20,and so on. If the unit
                    symbol is not specified, the unit defaults to bytes.Optional.',
                  type: string}
                source: {description: 'Copies a volume or snapshot to create a new
                    volume or replace an existing one. Specify the name of a volumeor
                    snapshot whose data is copied to the volume specified.If the volume
                    or snapshot replaces an existing volume, the overwrite parameter
                    must also be specified. If thevolume or snapshot replaces an existing
                    volume, an undo snapshot is automatically taken (providing a 24-hourwindow
                    during which the previous contents can be retrieved).Optional.',
                  type: string}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/post_1.13_volume_{volume}Examples'}
          description: ''
      tags: [Volumes]
    put:
      description: Recovers and renames the specified volume or volume snapshot, or
        resizes the specified volume.Either the size, action or name parameter must
        be specified.
      operationId: put/1.13/volume/{volume}
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action: {description: Recovers the contents of the specified volume
                    or volume snapshot. Set the parameter to recover.Optional., type: string}
                name: {description: 'Renames the specified volume or volume snapshot.When
                    renaming a snapshot, only the suffix can be changed.Optional.',
                  type: string}
                size: {description: 'number or string Changes the provisioned size
                    of the volume. If the new volume size is smaller than the original,
                    then thetruncate parameter needs to be set to true.Enter the size
                    as a number (bytes) or as a string with a single character unit
                    symbol. Valid unit symbols are K,M, G, T, P, representing KiB,
                    MiB, GiB, TiB, and PiB, respectively, where "Ki" denotes 2^10,
                    "Mi" denotes 2^20,and so on. If the unit symbol is not specified,
                    the unit defaults to bytes.Optional.', type: string}
                truncate: {description: 'Truncates (true) the volume. When a volume
                    is truncated, Purity automatically takes an undo snapshot,providing
                    a 24-hour window during which the previous contents can be retrieved.
                    After truncating a volume, itsprovisioned size can be subsequently
                    increased, but the data in truncated sectors cannot be retrieved.Required
                    if the volume size is set to a size that is smaller than the original.',
                  type: boolean}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/put_1.13_volume_{volume}Examples'}
          description: ''
      tags: [Volumes]
  /1.13/volume/{volume}/diff:
    get:
      description: Lists block differences for the specified volume snapshot.
      operationId: get/1.13/volume/{volume}/diff
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      - description: Snapshot name to be used as the base for the diff. If a base
          snapshot is not specified, all mapped blocks forthe volume are returned.Optional.
        in: query
        name: base
        schema: {type: string}
      - description: number or string Granularity, in bytes, at which to compare.
        in: query
        name: block_size
        required: true
        schema: {type: string}
      - description: Length of the region, in bytes, to compare.
        in: query
        name: length
        required: true
        schema: {type: string}
      - description: Absolute offset, in bytes, of the region to compare. Must be
          a multiple of block_size.Optional.
        in: query
        name: offset
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_volume_{volume}_diffExamples'}
          description: ''
      tags: [Volumes]
  /1.13/volume/{volume}/hgroup:
    get:
      description: Lists shared connections for the specified volume.
      operationId: get/1.13/volume/{volume}/hgroup
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_volume_{volume}_hgroupExamples'}
          description: ''
      tags: [Volumes]
  /1.13/volume/{volume}/host:
    get:
      description: Lists private connections for the specified volume.
      operationId: get/1.13/volume/{volume}/host
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/get_1.13_volume_{volume}_hostExamples'}
          description: ''
      tags: [Volumes]
  /1.13/volume/{volume}/pgroup/{pgroup}:
    delete:
      description: Removes a volume member from a protection group.
      operationId: delete/1.13/volume/{volume}/pgroup/{pgroup}
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Volumes]
    post:
      description: Adds a volume to a protection group.You can only add members of
        the same object type to a protection group. For example, you cannot add hosts
        or host groups to a protection group thatcontains volumes.
      operationId: post/1.13/volume/{volume}/pgroup/{pgroup}
      parameters:
      - in: path
        name: volume
        required: true
        schema: {type: string}
      - in: path
        name: pgroup
        required: true
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              properties: {}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags: [Volumes]
  /api_version:
    get:
      description: Lists supported API versions on this array.
      responses:
        200: {description: List supported API versions}
      tags: [API]
servers:
- description: Your FlashArray IP/Hostname
  url: https://{hostname}/api/
  variables:
    hostname: {default: change-me, description: The FQDN or IP of the array}
tags:
- {description: List APIs, name: API}
- {description: Create and destroy REST sessions., name: Authentication}
- {description: 'View and manage the array, and administer the phonehome and remote
    assist features.', name: Array}
- {description: View and manage volumes and snapshots., name: Volumes}
- {description: 'View, create, and manage hosts.', name: Hosts}
- {description: 'View, create, and manage host groups.', name: Host}
- {description: 'View, create, and manage protection groups.', name: Protection}
- {description: View array host connection port attributes., name: Connection}
- {description: 'View a list of email addresses designated to receive Purity alerts,
    test the alert feature, enable or disable alert notifications, designate email
    addresses toreceive Purity alerts, and remove email addresses from the list of
    designated alert recipients. View a list of alert events, audit records, and user
    loginsessions. Flag alert and audit messages.', name: Alerts}
- {description: View and set SNMP manager and trap message attributes., name: SNMP}
- {description: View and manage SSL certificates., name: SSL}
- {description: View and set DNS and network interface attributes., name: Network}
- {description: View and manage array hardware components., name: Hardware}
- {description: View app attributes., name: Apps}
- {description: View and manage users and directory service configurations., name: Users}
